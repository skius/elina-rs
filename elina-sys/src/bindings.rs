/* automatically generated by rust-bindgen 0.59.1 */

pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __ENUM_IDTYPE_T: u32 = 1;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const _MATH_H: u32 = 1;
pub const _BITS_LIBM_SIMD_DECL_STUBS_H: u32 = 1;
pub const __FP_LOGB0_IS_MIN: u32 = 1;
pub const __FP_LOGBNAN_IS_MIN: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const __MATH_DECLARING_DOUBLE: u32 = 1;
pub const __MATH_DECLARING_FLOATN: u32 = 0;
pub const __MATH_DECLARE_LDOUBLE: u32 = 1;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _ASSERT_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const __GMP_HAVE_HOST_CPU_FAMILY_power: u32 = 0;
pub const __GMP_HAVE_HOST_CPU_FAMILY_powerpc: u32 = 0;
pub const GMP_LIMB_BITS: u32 = 64;
pub const GMP_NAIL_BITS: u32 = 0;
pub const GMP_NUMB_BITS: u32 = 64;
pub const __GNU_MP__: u32 = 6;
pub const __GMP_LIBGMP_DLL: u32 = 0;
pub const __GMP_MP_SIZE_T_INT: u32 = 0;
pub const _GMP_H_HAVE_FILE: u32 = 1;
pub const _GMP_H_HAVE_VA_LIST: u32 = 1;
pub const __GMP_INLINE_PROTOTYPES: u32 = 1;
pub const __GMP_CC: &'static [u8; 4usize] = b"gcc\0";
pub const __GMP_CFLAGS: &'static [u8; 70usize] =
    b"-O2 -pedantic -fomit-frame-pointer -m64 -mtune=haswell -march=haswell\0";
pub const __GNU_MP_VERSION: u32 = 6;
pub const __GNU_MP_VERSION_MINOR: u32 = 2;
pub const __GNU_MP_VERSION_PATCHLEVEL: u32 = 0;
pub const __GNU_MP_RELEASE: u32 = 60200;
pub const MPFR_VERSION_MAJOR: u32 = 4;
pub const MPFR_VERSION_MINOR: u32 = 1;
pub const MPFR_VERSION_PATCHLEVEL: u32 = 0;
pub const MPFR_VERSION_STRING: &'static [u8; 6usize] = b"4.1.0\0";
pub const MPFR_FLAGS_UNDERFLOW: u32 = 1;
pub const MPFR_FLAGS_OVERFLOW: u32 = 2;
pub const MPFR_FLAGS_NAN: u32 = 4;
pub const MPFR_FLAGS_INEXACT: u32 = 8;
pub const MPFR_FLAGS_ERANGE: u32 = 16;
pub const MPFR_FLAGS_DIVBY0: u32 = 32;
pub const MPFR_FLAGS_ALL: u32 = 63;
pub const _MPFR_PREC_FORMAT: u32 = 3;
pub const _MPFR_EXP_FORMAT: u32 = 3;
pub const MPFR_PREC_MIN: u32 = 1;
pub const MPFR_USE_C99_FEATURE: u32 = 1;
pub const _MPFR_H_HAVE_INTMAX_T: u32 = 1;
pub const _MPFR_H_HAVE_FILE: u32 = 1;
pub const _MPFR_H_HAVE_VA_LIST: u32 = 1;
pub const _MPFR_H_HAVE_VA_LIST_FILE: u32 = 1;
pub const ELINA_INT_ZERO: u32 = 0;
pub const ELINA_INT_ONE: u32 = 1;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::std::os::raw::c_uint;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> size_t;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_slist>())).__next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: size_t,
        __size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: size_t, __size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(
        __pwcs: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcstombs(
        __s: *mut ::std::os::raw::c_char,
        __pwcs: *const wchar_t,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: size_t,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut size_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: size_t);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn __fpclassify(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbit(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsig(__x: f64, __y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignaling(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acos(__x: f64) -> f64;
}
extern "C" {
    pub fn __acos(__x: f64) -> f64;
}
extern "C" {
    pub fn asin(__x: f64) -> f64;
}
extern "C" {
    pub fn __asin(__x: f64) -> f64;
}
extern "C" {
    pub fn atan(__x: f64) -> f64;
}
extern "C" {
    pub fn __atan(__x: f64) -> f64;
}
extern "C" {
    pub fn atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn __atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn cos(__x: f64) -> f64;
}
extern "C" {
    pub fn __cos(__x: f64) -> f64;
}
extern "C" {
    pub fn sin(__x: f64) -> f64;
}
extern "C" {
    pub fn __sin(__x: f64) -> f64;
}
extern "C" {
    pub fn tan(__x: f64) -> f64;
}
extern "C" {
    pub fn __tan(__x: f64) -> f64;
}
extern "C" {
    pub fn cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn exp(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp(__x: f64) -> f64;
}
extern "C" {
    pub fn frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn log(__x: f64) -> f64;
}
extern "C" {
    pub fn __log(__x: f64) -> f64;
}
extern "C" {
    pub fn log10(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10(__x: f64) -> f64;
}
extern "C" {
    pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn __expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn __log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn logb(__x: f64) -> f64;
}
extern "C" {
    pub fn __logb(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn log2(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2(__x: f64) -> f64;
}
extern "C" {
    pub fn pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn __ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn __fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn floor(__x: f64) -> f64;
}
extern "C" {
    pub fn __floor(__x: f64) -> f64;
}
extern "C" {
    pub fn fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn significand(__x: f64) -> f64;
}
extern "C" {
    pub fn __significand(__x: f64) -> f64;
}
extern "C" {
    pub fn copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rint(__x: f64) -> f64;
}
extern "C" {
    pub fn __rint(__x: f64) -> f64;
}
extern "C" {
    pub fn nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(__x: f64, __y: u128) -> f64;
}
extern "C" {
    pub fn __nexttoward(__x: f64, __y: u128) -> f64;
}
extern "C" {
    pub fn remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn __scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn __nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn round(__x: f64) -> f64;
}
extern "C" {
    pub fn __round(__x: f64) -> f64;
}
extern "C" {
    pub fn trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn __trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __fpclassifyf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsigf(__x: f32, __y: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignalingf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn __atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn expf(__x: f32) -> f32;
}
extern "C" {
    pub fn __expf(__x: f32) -> f32;
}
extern "C" {
    pub fn frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn logf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logf(__x: f32) -> f32;
}
extern "C" {
    pub fn log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn __expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn __log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn __ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn __fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn __floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn __significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn __nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nexttowardf(__x: f32, __y: u128) -> f32;
}
extern "C" {
    pub fn __nexttowardf(__x: f32, __y: u128) -> f32;
}
extern "C" {
    pub fn remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn __scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn __roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn __truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __fpclassifyl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinfl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitel(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnanl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsigl(__x: u128, __y: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignalingl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosl(__x: u128) -> u128;
}
extern "C" {
    pub fn __acosl(__x: u128) -> u128;
}
extern "C" {
    pub fn asinl(__x: u128) -> u128;
}
extern "C" {
    pub fn __asinl(__x: u128) -> u128;
}
extern "C" {
    pub fn atanl(__x: u128) -> u128;
}
extern "C" {
    pub fn __atanl(__x: u128) -> u128;
}
extern "C" {
    pub fn atan2l(__y: u128, __x: u128) -> u128;
}
extern "C" {
    pub fn __atan2l(__y: u128, __x: u128) -> u128;
}
extern "C" {
    pub fn cosl(__x: u128) -> u128;
}
extern "C" {
    pub fn __cosl(__x: u128) -> u128;
}
extern "C" {
    pub fn sinl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sinl(__x: u128) -> u128;
}
extern "C" {
    pub fn tanl(__x: u128) -> u128;
}
extern "C" {
    pub fn __tanl(__x: u128) -> u128;
}
extern "C" {
    pub fn coshl(__x: u128) -> u128;
}
extern "C" {
    pub fn __coshl(__x: u128) -> u128;
}
extern "C" {
    pub fn sinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn tanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __tanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn acoshl(__x: u128) -> u128;
}
extern "C" {
    pub fn __acoshl(__x: u128) -> u128;
}
extern "C" {
    pub fn asinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __asinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn atanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __atanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn expl(__x: u128) -> u128;
}
extern "C" {
    pub fn __expl(__x: u128) -> u128;
}
extern "C" {
    pub fn frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn logl(__x: u128) -> u128;
}
extern "C" {
    pub fn __logl(__x: u128) -> u128;
}
extern "C" {
    pub fn log10l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log10l(__x: u128) -> u128;
}
extern "C" {
    pub fn modfl(__x: u128, __iptr: *mut u128) -> u128;
}
extern "C" {
    pub fn __modfl(__x: u128, __iptr: *mut u128) -> u128;
}
extern "C" {
    pub fn expm1l(__x: u128) -> u128;
}
extern "C" {
    pub fn __expm1l(__x: u128) -> u128;
}
extern "C" {
    pub fn log1pl(__x: u128) -> u128;
}
extern "C" {
    pub fn __log1pl(__x: u128) -> u128;
}
extern "C" {
    pub fn logbl(__x: u128) -> u128;
}
extern "C" {
    pub fn __logbl(__x: u128) -> u128;
}
extern "C" {
    pub fn exp2l(__x: u128) -> u128;
}
extern "C" {
    pub fn __exp2l(__x: u128) -> u128;
}
extern "C" {
    pub fn log2l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log2l(__x: u128) -> u128;
}
extern "C" {
    pub fn powl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __powl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn sqrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sqrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn hypotl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __hypotl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn cbrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn __cbrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn ceill(__x: u128) -> u128;
}
extern "C" {
    pub fn __ceill(__x: u128) -> u128;
}
extern "C" {
    pub fn fabsl(__x: u128) -> u128;
}
extern "C" {
    pub fn __fabsl(__x: u128) -> u128;
}
extern "C" {
    pub fn floorl(__x: u128) -> u128;
}
extern "C" {
    pub fn __floorl(__x: u128) -> u128;
}
extern "C" {
    pub fn fmodl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmodl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn isinfl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitel(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dreml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __dreml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn significandl(__x: u128) -> u128;
}
extern "C" {
    pub fn __significandl(__x: u128) -> u128;
}
extern "C" {
    pub fn copysignl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __copysignl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn __nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn isnanl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __j0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn j1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __j1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn jnl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn __jnl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn y0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __y0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn y1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __y1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn ynl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn __ynl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn __erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn __erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn gammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __gammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammal_r(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __lgammal_r(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn rintl(__x: u128) -> u128;
}
extern "C" {
    pub fn __rintl(__x: u128) -> u128;
}
extern "C" {
    pub fn nextafterl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __nextafterl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn nexttowardl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __nexttowardl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn remainderl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __remainderl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
}
extern "C" {
    pub fn __scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
}
extern "C" {
    pub fn nearbyintl(__x: u128) -> u128;
}
extern "C" {
    pub fn __nearbyintl(__x: u128) -> u128;
}
extern "C" {
    pub fn roundl(__x: u128) -> u128;
}
extern "C" {
    pub fn __roundl(__x: u128) -> u128;
}
extern "C" {
    pub fn truncl(__x: u128) -> u128;
}
extern "C" {
    pub fn __truncl(__x: u128) -> u128;
}
extern "C" {
    pub fn remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn lrintl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdiml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fdiml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fmaxl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmaxl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fminl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fminl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
extern "C" {
    pub fn __fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
extern "C" {
    pub fn scalbl(__x: u128, __n: u128) -> u128;
}
extern "C" {
    pub fn __scalbl(__x: u128, __n: u128) -> u128;
}
extern "C" {
    pub static mut signgam: ::std::os::raw::c_int;
}
pub const FP_NAN: ::std::os::raw::c_uint = 0;
pub const FP_INFINITE: ::std::os::raw::c_uint = 1;
pub const FP_ZERO: ::std::os::raw::c_uint = 2;
pub const FP_SUBNORMAL: ::std::os::raw::c_uint = 3;
pub const FP_NORMAL: ::std::os::raw::c_uint = 4;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
        __l: locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: size_t) -> size_t;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: size_t,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: size_t,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __assert_fail(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn __assert_perror_fail(
        __errnum: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn __assert(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_int,
    );
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type mp_limb_t = ::std::os::raw::c_ulong;
pub type mp_limb_signed_t = ::std::os::raw::c_long;
pub type mp_bitcnt_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __mpz_struct {
    pub _mp_alloc: ::std::os::raw::c_int,
    pub _mp_size: ::std::os::raw::c_int,
    pub _mp_d: *mut mp_limb_t,
}
#[test]
fn bindgen_test_layout___mpz_struct() {
    assert_eq!(
        ::std::mem::size_of::<__mpz_struct>(),
        16usize,
        concat!("Size of: ", stringify!(__mpz_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__mpz_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__mpz_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mpz_struct>()))._mp_alloc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mpz_struct),
            "::",
            stringify!(_mp_alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mpz_struct>()))._mp_size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mpz_struct),
            "::",
            stringify!(_mp_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mpz_struct>()))._mp_d as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mpz_struct),
            "::",
            stringify!(_mp_d)
        )
    );
}
pub type MP_INT = __mpz_struct;
pub type mpz_t = [__mpz_struct; 1usize];
pub type mp_ptr = *mut mp_limb_t;
pub type mp_srcptr = *const mp_limb_t;
pub type mp_size_t = ::std::os::raw::c_long;
pub type mp_exp_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __mpq_struct {
    pub _mp_num: __mpz_struct,
    pub _mp_den: __mpz_struct,
}
#[test]
fn bindgen_test_layout___mpq_struct() {
    assert_eq!(
        ::std::mem::size_of::<__mpq_struct>(),
        32usize,
        concat!("Size of: ", stringify!(__mpq_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__mpq_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__mpq_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mpq_struct>()))._mp_num as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mpq_struct),
            "::",
            stringify!(_mp_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mpq_struct>()))._mp_den as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mpq_struct),
            "::",
            stringify!(_mp_den)
        )
    );
}
pub type MP_RAT = __mpq_struct;
pub type mpq_t = [__mpq_struct; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __mpf_struct {
    pub _mp_prec: ::std::os::raw::c_int,
    pub _mp_size: ::std::os::raw::c_int,
    pub _mp_exp: mp_exp_t,
    pub _mp_d: *mut mp_limb_t,
}
#[test]
fn bindgen_test_layout___mpf_struct() {
    assert_eq!(
        ::std::mem::size_of::<__mpf_struct>(),
        24usize,
        concat!("Size of: ", stringify!(__mpf_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__mpf_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__mpf_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mpf_struct>()))._mp_prec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mpf_struct),
            "::",
            stringify!(_mp_prec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mpf_struct>()))._mp_size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mpf_struct),
            "::",
            stringify!(_mp_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mpf_struct>()))._mp_exp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mpf_struct),
            "::",
            stringify!(_mp_exp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mpf_struct>()))._mp_d as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mpf_struct),
            "::",
            stringify!(_mp_d)
        )
    );
}
pub type mpf_t = [__mpf_struct; 1usize];
pub const gmp_randalg_t_GMP_RAND_ALG_DEFAULT: gmp_randalg_t = 0;
pub const gmp_randalg_t_GMP_RAND_ALG_LC: gmp_randalg_t = 0;
pub type gmp_randalg_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __gmp_randstate_struct {
    pub _mp_seed: mpz_t,
    pub _mp_alg: gmp_randalg_t,
    pub _mp_algdata: __gmp_randstate_struct__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __gmp_randstate_struct__bindgen_ty_1 {
    pub _mp_lc: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___gmp_randstate_struct__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__gmp_randstate_struct__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__gmp_randstate_struct__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gmp_randstate_struct__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__gmp_randstate_struct__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__gmp_randstate_struct__bindgen_ty_1>()))._mp_lc as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__gmp_randstate_struct__bindgen_ty_1),
            "::",
            stringify!(_mp_lc)
        )
    );
}
#[test]
fn bindgen_test_layout___gmp_randstate_struct() {
    assert_eq!(
        ::std::mem::size_of::<__gmp_randstate_struct>(),
        32usize,
        concat!("Size of: ", stringify!(__gmp_randstate_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__gmp_randstate_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__gmp_randstate_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__gmp_randstate_struct>()))._mp_seed as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__gmp_randstate_struct),
            "::",
            stringify!(_mp_seed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__gmp_randstate_struct>()))._mp_alg as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__gmp_randstate_struct),
            "::",
            stringify!(_mp_alg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__gmp_randstate_struct>()))._mp_algdata as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__gmp_randstate_struct),
            "::",
            stringify!(_mp_algdata)
        )
    );
}
pub type gmp_randstate_t = [__gmp_randstate_struct; 1usize];
pub type mpz_srcptr = *const __mpz_struct;
pub type mpz_ptr = *mut __mpz_struct;
pub type mpf_srcptr = *const __mpf_struct;
pub type mpf_ptr = *mut __mpf_struct;
pub type mpq_srcptr = *const __mpq_struct;
pub type mpq_ptr = *mut __mpq_struct;
extern "C" {
    pub fn __gmp_set_memory_functions(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(arg1: size_t) -> *mut ::std::os::raw::c_void,
        >,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: size_t,
                arg3: size_t,
            ) -> *mut ::std::os::raw::c_void,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: size_t),
        >,
    );
}
extern "C" {
    pub fn __gmp_get_memory_functions(
        arg1: *mut ::std::option::Option<
            unsafe extern "C" fn(arg1: size_t) -> *mut ::std::os::raw::c_void,
        >,
        arg2: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: size_t,
                arg3: size_t,
            ) -> *mut ::std::os::raw::c_void,
        >,
        arg3: *mut ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: size_t),
        >,
    );
}
extern "C" {
    pub static __gmp_bits_per_limb: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __gmp_errno: ::std::os::raw::c_int;
}
extern "C" {
    pub static __gmp_version: *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn __gmp_randinit(arg1: *mut __gmp_randstate_struct, arg2: gmp_randalg_t, ...);
}
extern "C" {
    pub fn __gmp_randinit_default(arg1: *mut __gmp_randstate_struct);
}
extern "C" {
    pub fn __gmp_randinit_lc_2exp(
        arg1: *mut __gmp_randstate_struct,
        arg2: mpz_srcptr,
        arg3: ::std::os::raw::c_ulong,
        arg4: mp_bitcnt_t,
    );
}
extern "C" {
    pub fn __gmp_randinit_lc_2exp_size(
        arg1: *mut __gmp_randstate_struct,
        arg2: mp_bitcnt_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmp_randinit_mt(arg1: *mut __gmp_randstate_struct);
}
extern "C" {
    pub fn __gmp_randinit_set(
        arg1: *mut __gmp_randstate_struct,
        arg2: *const __gmp_randstate_struct,
    );
}
extern "C" {
    pub fn __gmp_randseed(arg1: *mut __gmp_randstate_struct, arg2: mpz_srcptr);
}
extern "C" {
    pub fn __gmp_randseed_ui(arg1: *mut __gmp_randstate_struct, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmp_randclear(arg1: *mut __gmp_randstate_struct);
}
extern "C" {
    pub fn __gmp_urandomb_ui(
        arg1: *mut __gmp_randstate_struct,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmp_urandomm_ui(
        arg1: *mut __gmp_randstate_struct,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmp_asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmp_fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmp_printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmp_snprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: size_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmp_sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmp_vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmp_vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmp_vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmp_vsnprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: size_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmp_vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmp_fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmp_scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmp_sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmp_vfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmp_vscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmp_vsscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_realloc(arg1: mpz_ptr, arg2: mp_size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __gmpz_abs(arg1: mpz_ptr, arg2: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_add(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_add_ui(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_addmul(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_addmul_ui(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_and(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_array_init(arg1: mpz_ptr, arg2: mp_size_t, arg3: mp_size_t);
}
extern "C" {
    pub fn __gmpz_bin_ui(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_bin_uiui(
        arg1: mpz_ptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn __gmpz_cdiv_q(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_cdiv_q_2exp(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_cdiv_q_ui(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_cdiv_qr(arg1: mpz_ptr, arg2: mpz_ptr, arg3: mpz_srcptr, arg4: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_cdiv_qr_ui(
        arg1: mpz_ptr,
        arg2: mpz_ptr,
        arg3: mpz_srcptr,
        arg4: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_cdiv_r(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_cdiv_r_2exp(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_cdiv_r_ui(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_cdiv_ui(
        arg1: mpz_srcptr,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_clear(arg1: mpz_ptr);
}
extern "C" {
    pub fn __gmpz_clears(arg1: mpz_ptr, ...);
}
extern "C" {
    pub fn __gmpz_clrbit(arg1: mpz_ptr, arg2: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_cmp(arg1: mpz_srcptr, arg2: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_cmp_d(arg1: mpz_srcptr, arg2: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_cmp_si(arg1: mpz_srcptr, arg2: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_cmp_ui(arg1: mpz_srcptr, arg2: ::std::os::raw::c_ulong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_cmpabs(arg1: mpz_srcptr, arg2: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_cmpabs_d(arg1: mpz_srcptr, arg2: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_cmpabs_ui(
        arg1: mpz_srcptr,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_com(arg1: mpz_ptr, arg2: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_combit(arg1: mpz_ptr, arg2: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_congruent_p(
        arg1: mpz_srcptr,
        arg2: mpz_srcptr,
        arg3: mpz_srcptr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_congruent_2exp_p(
        arg1: mpz_srcptr,
        arg2: mpz_srcptr,
        arg3: mp_bitcnt_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_congruent_ui_p(
        arg1: mpz_srcptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_divexact(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_divexact_ui(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_divisible_p(arg1: mpz_srcptr, arg2: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_divisible_ui_p(
        arg1: mpz_srcptr,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_divisible_2exp_p(arg1: mpz_srcptr, arg2: mp_bitcnt_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_dump(arg1: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_export(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut size_t,
        arg3: ::std::os::raw::c_int,
        arg4: size_t,
        arg5: ::std::os::raw::c_int,
        arg6: size_t,
        arg7: mpz_srcptr,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __gmpz_fac_ui(arg1: mpz_ptr, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_2fac_ui(arg1: mpz_ptr, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_mfac_uiui(
        arg1: mpz_ptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn __gmpz_primorial_ui(arg1: mpz_ptr, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_fdiv_q(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_fdiv_q_2exp(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_fdiv_q_ui(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_fdiv_qr(arg1: mpz_ptr, arg2: mpz_ptr, arg3: mpz_srcptr, arg4: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_fdiv_qr_ui(
        arg1: mpz_ptr,
        arg2: mpz_ptr,
        arg3: mpz_srcptr,
        arg4: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_fdiv_r(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_fdiv_r_2exp(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_fdiv_r_ui(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_fdiv_ui(
        arg1: mpz_srcptr,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_fib_ui(arg1: mpz_ptr, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_fib2_ui(arg1: mpz_ptr, arg2: mpz_ptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_fits_sint_p(arg1: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_fits_slong_p(arg1: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_fits_sshort_p(arg1: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_fits_uint_p(arg1: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_fits_ulong_p(arg1: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_fits_ushort_p(arg1: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_gcd(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_gcd_ui(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_gcdext(
        arg1: mpz_ptr,
        arg2: mpz_ptr,
        arg3: mpz_ptr,
        arg4: mpz_srcptr,
        arg5: mpz_srcptr,
    );
}
extern "C" {
    pub fn __gmpz_get_d(arg1: mpz_srcptr) -> f64;
}
extern "C" {
    pub fn __gmpz_get_d_2exp(arg1: *mut ::std::os::raw::c_long, arg2: mpz_srcptr) -> f64;
}
extern "C" {
    pub fn __gmpz_get_si(arg1: mpz_srcptr) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __gmpz_get_str(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: mpz_srcptr,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __gmpz_get_ui(arg1: mpz_srcptr) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_getlimbn(arg1: mpz_srcptr, arg2: mp_size_t) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpz_hamdist(arg1: mpz_srcptr, arg2: mpz_srcptr) -> mp_bitcnt_t;
}
extern "C" {
    pub fn __gmpz_import(
        arg1: mpz_ptr,
        arg2: size_t,
        arg3: ::std::os::raw::c_int,
        arg4: size_t,
        arg5: ::std::os::raw::c_int,
        arg6: size_t,
        arg7: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn __gmpz_init(arg1: mpz_ptr);
}
extern "C" {
    pub fn __gmpz_init2(arg1: mpz_ptr, arg2: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_inits(arg1: mpz_ptr, ...);
}
extern "C" {
    pub fn __gmpz_init_set(arg1: mpz_ptr, arg2: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_init_set_d(arg1: mpz_ptr, arg2: f64);
}
extern "C" {
    pub fn __gmpz_init_set_si(arg1: mpz_ptr, arg2: ::std::os::raw::c_long);
}
extern "C" {
    pub fn __gmpz_init_set_str(
        arg1: mpz_ptr,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_init_set_ui(arg1: mpz_ptr, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_inp_raw(arg1: mpz_ptr, arg2: *mut FILE) -> size_t;
}
extern "C" {
    pub fn __gmpz_inp_str(arg1: mpz_ptr, arg2: *mut FILE, arg3: ::std::os::raw::c_int) -> size_t;
}
extern "C" {
    pub fn __gmpz_invert(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: mpz_srcptr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_ior(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_jacobi(arg1: mpz_srcptr, arg2: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_kronecker_si(
        arg1: mpz_srcptr,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_kronecker_ui(
        arg1: mpz_srcptr,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_si_kronecker(
        arg1: ::std::os::raw::c_long,
        arg2: mpz_srcptr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_ui_kronecker(
        arg1: ::std::os::raw::c_ulong,
        arg2: mpz_srcptr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_lcm(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_lcm_ui(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_lucnum_ui(arg1: mpz_ptr, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_lucnum2_ui(arg1: mpz_ptr, arg2: mpz_ptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_millerrabin(
        arg1: mpz_srcptr,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_mod(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_mul(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_mul_2exp(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_mul_si(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: ::std::os::raw::c_long);
}
extern "C" {
    pub fn __gmpz_mul_ui(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_neg(arg1: mpz_ptr, arg2: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_nextprime(arg1: mpz_ptr, arg2: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_out_raw(arg1: *mut FILE, arg2: mpz_srcptr) -> size_t;
}
extern "C" {
    pub fn __gmpz_out_str(arg1: *mut FILE, arg2: ::std::os::raw::c_int, arg3: mpz_srcptr)
        -> size_t;
}
extern "C" {
    pub fn __gmpz_perfect_power_p(arg1: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_perfect_square_p(arg1: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_popcount(arg1: mpz_srcptr) -> mp_bitcnt_t;
}
extern "C" {
    pub fn __gmpz_pow_ui(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_powm(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr, arg4: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_powm_sec(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr, arg4: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_powm_ui(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: ::std::os::raw::c_ulong,
        arg4: mpz_srcptr,
    );
}
extern "C" {
    pub fn __gmpz_probab_prime_p(
        arg1: mpz_srcptr,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_random(arg1: mpz_ptr, arg2: mp_size_t);
}
extern "C" {
    pub fn __gmpz_random2(arg1: mpz_ptr, arg2: mp_size_t);
}
extern "C" {
    pub fn __gmpz_realloc2(arg1: mpz_ptr, arg2: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_remove(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr) -> mp_bitcnt_t;
}
extern "C" {
    pub fn __gmpz_root(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_rootrem(
        arg1: mpz_ptr,
        arg2: mpz_ptr,
        arg3: mpz_srcptr,
        arg4: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn __gmpz_rrandomb(arg1: mpz_ptr, arg2: *mut __gmp_randstate_struct, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_scan0(arg1: mpz_srcptr, arg2: mp_bitcnt_t) -> mp_bitcnt_t;
}
extern "C" {
    pub fn __gmpz_scan1(arg1: mpz_srcptr, arg2: mp_bitcnt_t) -> mp_bitcnt_t;
}
extern "C" {
    pub fn __gmpz_set(arg1: mpz_ptr, arg2: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_set_d(arg1: mpz_ptr, arg2: f64);
}
extern "C" {
    pub fn __gmpz_set_f(arg1: mpz_ptr, arg2: mpf_srcptr);
}
extern "C" {
    pub fn __gmpz_set_q(arg1: mpz_ptr, arg2: mpq_srcptr);
}
extern "C" {
    pub fn __gmpz_set_si(arg1: mpz_ptr, arg2: ::std::os::raw::c_long);
}
extern "C" {
    pub fn __gmpz_set_str(
        arg1: mpz_ptr,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_set_ui(arg1: mpz_ptr, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_setbit(arg1: mpz_ptr, arg2: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_size(arg1: mpz_srcptr) -> size_t;
}
extern "C" {
    pub fn __gmpz_sizeinbase(arg1: mpz_srcptr, arg2: ::std::os::raw::c_int) -> size_t;
}
extern "C" {
    pub fn __gmpz_sqrt(arg1: mpz_ptr, arg2: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_sqrtrem(arg1: mpz_ptr, arg2: mpz_ptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_sub(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_sub_ui(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_ui_sub(arg1: mpz_ptr, arg2: ::std::os::raw::c_ulong, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_submul(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_submul_ui(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_swap(arg1: mpz_ptr, arg2: mpz_ptr);
}
extern "C" {
    pub fn __gmpz_tdiv_ui(
        arg1: mpz_srcptr,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_tdiv_q(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_tdiv_q_2exp(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_tdiv_q_ui(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_tdiv_qr(arg1: mpz_ptr, arg2: mpz_ptr, arg3: mpz_srcptr, arg4: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_tdiv_qr_ui(
        arg1: mpz_ptr,
        arg2: mpz_ptr,
        arg3: mpz_srcptr,
        arg4: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_tdiv_r(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_tdiv_r_2exp(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_tdiv_r_ui(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_tstbit(arg1: mpz_srcptr, arg2: mp_bitcnt_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_ui_pow_ui(
        arg1: mpz_ptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn __gmpz_urandomb(arg1: mpz_ptr, arg2: *mut __gmp_randstate_struct, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_urandomm(arg1: mpz_ptr, arg2: *mut __gmp_randstate_struct, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_xor(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_limbs_read(arg1: mpz_srcptr) -> mp_srcptr;
}
extern "C" {
    pub fn __gmpz_limbs_write(arg1: mpz_ptr, arg2: mp_size_t) -> mp_ptr;
}
extern "C" {
    pub fn __gmpz_limbs_modify(arg1: mpz_ptr, arg2: mp_size_t) -> mp_ptr;
}
extern "C" {
    pub fn __gmpz_limbs_finish(arg1: mpz_ptr, arg2: mp_size_t);
}
extern "C" {
    pub fn __gmpz_roinit_n(arg1: mpz_ptr, arg2: mp_srcptr, arg3: mp_size_t) -> mpz_srcptr;
}
extern "C" {
    pub fn __gmpq_abs(arg1: mpq_ptr, arg2: mpq_srcptr);
}
extern "C" {
    pub fn __gmpq_add(arg1: mpq_ptr, arg2: mpq_srcptr, arg3: mpq_srcptr);
}
extern "C" {
    pub fn __gmpq_canonicalize(arg1: mpq_ptr);
}
extern "C" {
    pub fn __gmpq_clear(arg1: mpq_ptr);
}
extern "C" {
    pub fn __gmpq_clears(arg1: mpq_ptr, ...);
}
extern "C" {
    pub fn __gmpq_cmp(arg1: mpq_srcptr, arg2: mpq_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpq_cmp_si(
        arg1: mpq_srcptr,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpq_cmp_ui(
        arg1: mpq_srcptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpq_cmp_z(arg1: mpq_srcptr, arg2: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpq_div(arg1: mpq_ptr, arg2: mpq_srcptr, arg3: mpq_srcptr);
}
extern "C" {
    pub fn __gmpq_div_2exp(arg1: mpq_ptr, arg2: mpq_srcptr, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpq_equal(arg1: mpq_srcptr, arg2: mpq_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpq_get_num(arg1: mpz_ptr, arg2: mpq_srcptr);
}
extern "C" {
    pub fn __gmpq_get_den(arg1: mpz_ptr, arg2: mpq_srcptr);
}
extern "C" {
    pub fn __gmpq_get_d(arg1: mpq_srcptr) -> f64;
}
extern "C" {
    pub fn __gmpq_get_str(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: mpq_srcptr,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __gmpq_init(arg1: mpq_ptr);
}
extern "C" {
    pub fn __gmpq_inits(arg1: mpq_ptr, ...);
}
extern "C" {
    pub fn __gmpq_inp_str(arg1: mpq_ptr, arg2: *mut FILE, arg3: ::std::os::raw::c_int) -> size_t;
}
extern "C" {
    pub fn __gmpq_inv(arg1: mpq_ptr, arg2: mpq_srcptr);
}
extern "C" {
    pub fn __gmpq_mul(arg1: mpq_ptr, arg2: mpq_srcptr, arg3: mpq_srcptr);
}
extern "C" {
    pub fn __gmpq_mul_2exp(arg1: mpq_ptr, arg2: mpq_srcptr, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpq_neg(arg1: mpq_ptr, arg2: mpq_srcptr);
}
extern "C" {
    pub fn __gmpq_out_str(arg1: *mut FILE, arg2: ::std::os::raw::c_int, arg3: mpq_srcptr)
        -> size_t;
}
extern "C" {
    pub fn __gmpq_set(arg1: mpq_ptr, arg2: mpq_srcptr);
}
extern "C" {
    pub fn __gmpq_set_d(arg1: mpq_ptr, arg2: f64);
}
extern "C" {
    pub fn __gmpq_set_den(arg1: mpq_ptr, arg2: mpz_srcptr);
}
extern "C" {
    pub fn __gmpq_set_f(arg1: mpq_ptr, arg2: mpf_srcptr);
}
extern "C" {
    pub fn __gmpq_set_num(arg1: mpq_ptr, arg2: mpz_srcptr);
}
extern "C" {
    pub fn __gmpq_set_si(
        arg1: mpq_ptr,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn __gmpq_set_str(
        arg1: mpq_ptr,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpq_set_ui(
        arg1: mpq_ptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn __gmpq_set_z(arg1: mpq_ptr, arg2: mpz_srcptr);
}
extern "C" {
    pub fn __gmpq_sub(arg1: mpq_ptr, arg2: mpq_srcptr, arg3: mpq_srcptr);
}
extern "C" {
    pub fn __gmpq_swap(arg1: mpq_ptr, arg2: mpq_ptr);
}
extern "C" {
    pub fn __gmpf_abs(arg1: mpf_ptr, arg2: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_add(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_add_ui(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpf_ceil(arg1: mpf_ptr, arg2: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_clear(arg1: mpf_ptr);
}
extern "C" {
    pub fn __gmpf_clears(arg1: mpf_ptr, ...);
}
extern "C" {
    pub fn __gmpf_cmp(arg1: mpf_srcptr, arg2: mpf_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_cmp_z(arg1: mpf_srcptr, arg2: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_cmp_d(arg1: mpf_srcptr, arg2: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_cmp_si(arg1: mpf_srcptr, arg2: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_cmp_ui(arg1: mpf_srcptr, arg2: ::std::os::raw::c_ulong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_div(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_div_2exp(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpf_div_ui(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpf_dump(arg1: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_eq(
        arg1: mpf_srcptr,
        arg2: mpf_srcptr,
        arg3: mp_bitcnt_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_fits_sint_p(arg1: mpf_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_fits_slong_p(arg1: mpf_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_fits_sshort_p(arg1: mpf_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_fits_uint_p(arg1: mpf_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_fits_ulong_p(arg1: mpf_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_fits_ushort_p(arg1: mpf_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_floor(arg1: mpf_ptr, arg2: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_get_d(arg1: mpf_srcptr) -> f64;
}
extern "C" {
    pub fn __gmpf_get_d_2exp(arg1: *mut ::std::os::raw::c_long, arg2: mpf_srcptr) -> f64;
}
extern "C" {
    pub fn __gmpf_get_default_prec() -> mp_bitcnt_t;
}
extern "C" {
    pub fn __gmpf_get_prec(arg1: mpf_srcptr) -> mp_bitcnt_t;
}
extern "C" {
    pub fn __gmpf_get_si(arg1: mpf_srcptr) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __gmpf_get_str(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut mp_exp_t,
        arg3: ::std::os::raw::c_int,
        arg4: size_t,
        arg5: mpf_srcptr,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __gmpf_get_ui(arg1: mpf_srcptr) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpf_init(arg1: mpf_ptr);
}
extern "C" {
    pub fn __gmpf_init2(arg1: mpf_ptr, arg2: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpf_inits(arg1: mpf_ptr, ...);
}
extern "C" {
    pub fn __gmpf_init_set(arg1: mpf_ptr, arg2: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_init_set_d(arg1: mpf_ptr, arg2: f64);
}
extern "C" {
    pub fn __gmpf_init_set_si(arg1: mpf_ptr, arg2: ::std::os::raw::c_long);
}
extern "C" {
    pub fn __gmpf_init_set_str(
        arg1: mpf_ptr,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_init_set_ui(arg1: mpf_ptr, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpf_inp_str(arg1: mpf_ptr, arg2: *mut FILE, arg3: ::std::os::raw::c_int) -> size_t;
}
extern "C" {
    pub fn __gmpf_integer_p(arg1: mpf_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_mul(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_mul_2exp(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpf_mul_ui(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpf_neg(arg1: mpf_ptr, arg2: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_out_str(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_int,
        arg3: size_t,
        arg4: mpf_srcptr,
    ) -> size_t;
}
extern "C" {
    pub fn __gmpf_pow_ui(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpf_random2(arg1: mpf_ptr, arg2: mp_size_t, arg3: mp_exp_t);
}
extern "C" {
    pub fn __gmpf_reldiff(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_set(arg1: mpf_ptr, arg2: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_set_d(arg1: mpf_ptr, arg2: f64);
}
extern "C" {
    pub fn __gmpf_set_default_prec(arg1: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpf_set_prec(arg1: mpf_ptr, arg2: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpf_set_prec_raw(arg1: mpf_ptr, arg2: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpf_set_q(arg1: mpf_ptr, arg2: mpq_srcptr);
}
extern "C" {
    pub fn __gmpf_set_si(arg1: mpf_ptr, arg2: ::std::os::raw::c_long);
}
extern "C" {
    pub fn __gmpf_set_str(
        arg1: mpf_ptr,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_set_ui(arg1: mpf_ptr, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpf_set_z(arg1: mpf_ptr, arg2: mpz_srcptr);
}
extern "C" {
    pub fn __gmpf_size(arg1: mpf_srcptr) -> size_t;
}
extern "C" {
    pub fn __gmpf_sqrt(arg1: mpf_ptr, arg2: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_sqrt_ui(arg1: mpf_ptr, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpf_sub(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_sub_ui(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpf_swap(arg1: mpf_ptr, arg2: mpf_ptr);
}
extern "C" {
    pub fn __gmpf_trunc(arg1: mpf_ptr, arg2: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_ui_div(arg1: mpf_ptr, arg2: ::std::os::raw::c_ulong, arg3: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_ui_sub(arg1: mpf_ptr, arg2: ::std::os::raw::c_ulong, arg3: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_urandomb(
        arg1: *mut __mpf_struct,
        arg2: *mut __gmp_randstate_struct,
        arg3: mp_bitcnt_t,
    );
}
extern "C" {
    pub fn __gmpn_add(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_srcptr,
        arg5: mp_size_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_add_1(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_add_n(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_srcptr,
        arg4: mp_size_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_addmul_1(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_cmp(arg1: mp_srcptr, arg2: mp_srcptr, arg3: mp_size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpn_zero_p(arg1: mp_srcptr, arg2: mp_size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpn_divexact_1(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_size_t, arg4: mp_limb_t);
}
extern "C" {
    pub fn __gmpn_divexact_by3c(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_divrem(
        arg1: mp_ptr,
        arg2: mp_size_t,
        arg3: mp_ptr,
        arg4: mp_size_t,
        arg5: mp_srcptr,
        arg6: mp_size_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_divrem_1(
        arg1: mp_ptr,
        arg2: mp_size_t,
        arg3: mp_srcptr,
        arg4: mp_size_t,
        arg5: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_divrem_2(
        arg1: mp_ptr,
        arg2: mp_size_t,
        arg3: mp_ptr,
        arg4: mp_size_t,
        arg5: mp_srcptr,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_div_qr_1(
        arg1: mp_ptr,
        arg2: *mut mp_limb_t,
        arg3: mp_srcptr,
        arg4: mp_size_t,
        arg5: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_div_qr_2(
        arg1: mp_ptr,
        arg2: mp_ptr,
        arg3: mp_srcptr,
        arg4: mp_size_t,
        arg5: mp_srcptr,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_gcd(
        arg1: mp_ptr,
        arg2: mp_ptr,
        arg3: mp_size_t,
        arg4: mp_ptr,
        arg5: mp_size_t,
    ) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_gcd_11(arg1: mp_limb_t, arg2: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_gcd_1(arg1: mp_srcptr, arg2: mp_size_t, arg3: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_gcdext_1(
        arg1: *mut mp_limb_signed_t,
        arg2: *mut mp_limb_signed_t,
        arg3: mp_limb_t,
        arg4: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_gcdext(
        arg1: mp_ptr,
        arg2: mp_ptr,
        arg3: *mut mp_size_t,
        arg4: mp_ptr,
        arg5: mp_size_t,
        arg6: mp_ptr,
        arg7: mp_size_t,
    ) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_get_str(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_int,
        arg3: mp_ptr,
        arg4: mp_size_t,
    ) -> size_t;
}
extern "C" {
    pub fn __gmpn_hamdist(arg1: mp_srcptr, arg2: mp_srcptr, arg3: mp_size_t) -> mp_bitcnt_t;
}
extern "C" {
    pub fn __gmpn_lshift(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: ::std::os::raw::c_uint,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_mod_1(arg1: mp_srcptr, arg2: mp_size_t, arg3: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_mul(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_srcptr,
        arg5: mp_size_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_mul_1(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_mul_n(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_srcptr, arg4: mp_size_t);
}
extern "C" {
    pub fn __gmpn_sqr(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_size_t);
}
extern "C" {
    pub fn __gmpn_neg(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_size_t) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_com(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_size_t);
}
extern "C" {
    pub fn __gmpn_perfect_square_p(arg1: mp_srcptr, arg2: mp_size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpn_perfect_power_p(arg1: mp_srcptr, arg2: mp_size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpn_popcount(arg1: mp_srcptr, arg2: mp_size_t) -> mp_bitcnt_t;
}
extern "C" {
    pub fn __gmpn_pow_1(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_limb_t,
        arg5: mp_ptr,
    ) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_preinv_mod_1(
        arg1: mp_srcptr,
        arg2: mp_size_t,
        arg3: mp_limb_t,
        arg4: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_random(arg1: mp_ptr, arg2: mp_size_t);
}
extern "C" {
    pub fn __gmpn_random2(arg1: mp_ptr, arg2: mp_size_t);
}
extern "C" {
    pub fn __gmpn_rshift(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: ::std::os::raw::c_uint,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_scan0(arg1: mp_srcptr, arg2: mp_bitcnt_t) -> mp_bitcnt_t;
}
extern "C" {
    pub fn __gmpn_scan1(arg1: mp_srcptr, arg2: mp_bitcnt_t) -> mp_bitcnt_t;
}
extern "C" {
    pub fn __gmpn_set_str(
        arg1: mp_ptr,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: size_t,
        arg4: ::std::os::raw::c_int,
    ) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_sizeinbase(
        arg1: mp_srcptr,
        arg2: mp_size_t,
        arg3: ::std::os::raw::c_int,
    ) -> size_t;
}
extern "C" {
    pub fn __gmpn_sqrtrem(
        arg1: mp_ptr,
        arg2: mp_ptr,
        arg3: mp_srcptr,
        arg4: mp_size_t,
    ) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_sub(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_srcptr,
        arg5: mp_size_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_sub_1(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_sub_n(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_srcptr,
        arg4: mp_size_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_submul_1(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_tdiv_qr(
        arg1: mp_ptr,
        arg2: mp_ptr,
        arg3: mp_size_t,
        arg4: mp_srcptr,
        arg5: mp_size_t,
        arg6: mp_srcptr,
        arg7: mp_size_t,
    );
}
extern "C" {
    pub fn __gmpn_and_n(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_srcptr, arg4: mp_size_t);
}
extern "C" {
    pub fn __gmpn_andn_n(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_srcptr, arg4: mp_size_t);
}
extern "C" {
    pub fn __gmpn_nand_n(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_srcptr, arg4: mp_size_t);
}
extern "C" {
    pub fn __gmpn_ior_n(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_srcptr, arg4: mp_size_t);
}
extern "C" {
    pub fn __gmpn_iorn_n(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_srcptr, arg4: mp_size_t);
}
extern "C" {
    pub fn __gmpn_nior_n(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_srcptr, arg4: mp_size_t);
}
extern "C" {
    pub fn __gmpn_xor_n(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_srcptr, arg4: mp_size_t);
}
extern "C" {
    pub fn __gmpn_xnor_n(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_srcptr, arg4: mp_size_t);
}
extern "C" {
    pub fn __gmpn_copyi(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_size_t);
}
extern "C" {
    pub fn __gmpn_copyd(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_size_t);
}
extern "C" {
    pub fn __gmpn_zero(arg1: mp_ptr, arg2: mp_size_t);
}
extern "C" {
    pub fn __gmpn_cnd_add_n(
        arg1: mp_limb_t,
        arg2: mp_ptr,
        arg3: mp_srcptr,
        arg4: mp_srcptr,
        arg5: mp_size_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_cnd_sub_n(
        arg1: mp_limb_t,
        arg2: mp_ptr,
        arg3: mp_srcptr,
        arg4: mp_srcptr,
        arg5: mp_size_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_sec_add_1(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_limb_t,
        arg5: mp_ptr,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_sec_add_1_itch(arg1: mp_size_t) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_sec_sub_1(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_limb_t,
        arg5: mp_ptr,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_sec_sub_1_itch(arg1: mp_size_t) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_cnd_swap(
        arg1: mp_limb_t,
        arg2: *mut mp_limb_t,
        arg3: *mut mp_limb_t,
        arg4: mp_size_t,
    );
}
extern "C" {
    pub fn __gmpn_sec_mul(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_srcptr,
        arg5: mp_size_t,
        arg6: mp_ptr,
    );
}
extern "C" {
    pub fn __gmpn_sec_mul_itch(arg1: mp_size_t, arg2: mp_size_t) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_sec_sqr(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_size_t, arg4: mp_ptr);
}
extern "C" {
    pub fn __gmpn_sec_sqr_itch(arg1: mp_size_t) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_sec_powm(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_srcptr,
        arg5: mp_bitcnt_t,
        arg6: mp_srcptr,
        arg7: mp_size_t,
        arg8: mp_ptr,
    );
}
extern "C" {
    pub fn __gmpn_sec_powm_itch(arg1: mp_size_t, arg2: mp_bitcnt_t, arg3: mp_size_t) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_sec_tabselect(
        arg1: *mut mp_limb_t,
        arg2: *const mp_limb_t,
        arg3: mp_size_t,
        arg4: mp_size_t,
        arg5: mp_size_t,
    );
}
extern "C" {
    pub fn __gmpn_sec_div_qr(
        arg1: mp_ptr,
        arg2: mp_ptr,
        arg3: mp_size_t,
        arg4: mp_srcptr,
        arg5: mp_size_t,
        arg6: mp_ptr,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_sec_div_qr_itch(arg1: mp_size_t, arg2: mp_size_t) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_sec_div_r(
        arg1: mp_ptr,
        arg2: mp_size_t,
        arg3: mp_srcptr,
        arg4: mp_size_t,
        arg5: mp_ptr,
    );
}
extern "C" {
    pub fn __gmpn_sec_div_r_itch(arg1: mp_size_t, arg2: mp_size_t) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_sec_invert(
        arg1: mp_ptr,
        arg2: mp_ptr,
        arg3: mp_srcptr,
        arg4: mp_size_t,
        arg5: mp_bitcnt_t,
        arg6: mp_ptr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpn_sec_invert_itch(arg1: mp_size_t) -> mp_size_t;
}
pub const GMP_ERROR_NONE: ::std::os::raw::c_uint = 0;
pub const GMP_ERROR_UNSUPPORTED_ARGUMENT: ::std::os::raw::c_uint = 1;
pub const GMP_ERROR_DIVISION_BY_ZERO: ::std::os::raw::c_uint = 2;
pub const GMP_ERROR_SQRT_OF_NEGATIVE: ::std::os::raw::c_uint = 4;
pub const GMP_ERROR_INVALID_ARGUMENT: ::std::os::raw::c_uint = 8;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub type mpfr_void = ::std::os::raw::c_void;
pub type mpfr_int = ::std::os::raw::c_int;
pub type mpfr_uint = ::std::os::raw::c_uint;
pub type mpfr_long = ::std::os::raw::c_long;
pub type mpfr_ulong = ::std::os::raw::c_ulong;
pub type mpfr_size_t = size_t;
pub type mpfr_flags_t = ::std::os::raw::c_uint;
pub const mpfr_rnd_t_MPFR_RNDN: mpfr_rnd_t = 0;
pub const mpfr_rnd_t_MPFR_RNDZ: mpfr_rnd_t = 1;
pub const mpfr_rnd_t_MPFR_RNDU: mpfr_rnd_t = 2;
pub const mpfr_rnd_t_MPFR_RNDD: mpfr_rnd_t = 3;
pub const mpfr_rnd_t_MPFR_RNDA: mpfr_rnd_t = 4;
pub const mpfr_rnd_t_MPFR_RNDF: mpfr_rnd_t = 5;
pub const mpfr_rnd_t_MPFR_RNDNA: mpfr_rnd_t = -1;
pub type mpfr_rnd_t = ::std::os::raw::c_int;
pub type mpfr_prec_t = ::std::os::raw::c_long;
pub type mpfr_uprec_t = ::std::os::raw::c_ulong;
pub type mpfr_sign_t = ::std::os::raw::c_int;
pub type mpfr_exp_t = ::std::os::raw::c_long;
pub type mpfr_uexp_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __mpfr_struct {
    pub _mpfr_prec: mpfr_prec_t,
    pub _mpfr_sign: mpfr_sign_t,
    pub _mpfr_exp: mpfr_exp_t,
    pub _mpfr_d: *mut mp_limb_t,
}
#[test]
fn bindgen_test_layout___mpfr_struct() {
    assert_eq!(
        ::std::mem::size_of::<__mpfr_struct>(),
        32usize,
        concat!("Size of: ", stringify!(__mpfr_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__mpfr_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__mpfr_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mpfr_struct>()))._mpfr_prec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mpfr_struct),
            "::",
            stringify!(_mpfr_prec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mpfr_struct>()))._mpfr_sign as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mpfr_struct),
            "::",
            stringify!(_mpfr_sign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mpfr_struct>()))._mpfr_exp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mpfr_struct),
            "::",
            stringify!(_mpfr_exp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mpfr_struct>()))._mpfr_d as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mpfr_struct),
            "::",
            stringify!(_mpfr_d)
        )
    );
}
pub type mpfr_t = [__mpfr_struct; 1usize];
pub type mpfr_ptr = *mut __mpfr_struct;
pub type mpfr_srcptr = *const __mpfr_struct;
pub const mpfr_kind_t_MPFR_NAN_KIND: mpfr_kind_t = 0;
pub const mpfr_kind_t_MPFR_INF_KIND: mpfr_kind_t = 1;
pub const mpfr_kind_t_MPFR_ZERO_KIND: mpfr_kind_t = 2;
pub const mpfr_kind_t_MPFR_REGULAR_KIND: mpfr_kind_t = 3;
pub type mpfr_kind_t = ::std::os::raw::c_uint;
pub const mpfr_free_cache_t_MPFR_FREE_LOCAL_CACHE: mpfr_free_cache_t = 1;
pub const mpfr_free_cache_t_MPFR_FREE_GLOBAL_CACHE: mpfr_free_cache_t = 2;
pub type mpfr_free_cache_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn mpfr_get_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mpfr_get_patches() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mpfr_buildopt_tls_p() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_buildopt_float128_p() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_buildopt_decimal_p() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_buildopt_gmpinternals_p() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_buildopt_sharedcache_p() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_buildopt_tune_case() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mpfr_get_emin() -> mpfr_exp_t;
}
extern "C" {
    pub fn mpfr_set_emin(arg1: mpfr_exp_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_get_emin_min() -> mpfr_exp_t;
}
extern "C" {
    pub fn mpfr_get_emin_max() -> mpfr_exp_t;
}
extern "C" {
    pub fn mpfr_get_emax() -> mpfr_exp_t;
}
extern "C" {
    pub fn mpfr_set_emax(arg1: mpfr_exp_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_get_emax_min() -> mpfr_exp_t;
}
extern "C" {
    pub fn mpfr_get_emax_max() -> mpfr_exp_t;
}
extern "C" {
    pub fn mpfr_set_default_rounding_mode(arg1: mpfr_rnd_t);
}
extern "C" {
    pub fn mpfr_get_default_rounding_mode() -> mpfr_rnd_t;
}
extern "C" {
    pub fn mpfr_print_rnd_mode(arg1: mpfr_rnd_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mpfr_clear_flags();
}
extern "C" {
    pub fn mpfr_clear_underflow();
}
extern "C" {
    pub fn mpfr_clear_overflow();
}
extern "C" {
    pub fn mpfr_clear_divby0();
}
extern "C" {
    pub fn mpfr_clear_nanflag();
}
extern "C" {
    pub fn mpfr_clear_inexflag();
}
extern "C" {
    pub fn mpfr_clear_erangeflag();
}
extern "C" {
    pub fn mpfr_set_underflow();
}
extern "C" {
    pub fn mpfr_set_overflow();
}
extern "C" {
    pub fn mpfr_set_divby0();
}
extern "C" {
    pub fn mpfr_set_nanflag();
}
extern "C" {
    pub fn mpfr_set_inexflag();
}
extern "C" {
    pub fn mpfr_set_erangeflag();
}
extern "C" {
    pub fn mpfr_underflow_p() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_overflow_p() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_divby0_p() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_nanflag_p() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_inexflag_p() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_erangeflag_p() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_flags_clear(arg1: mpfr_flags_t);
}
extern "C" {
    pub fn mpfr_flags_set(arg1: mpfr_flags_t);
}
extern "C" {
    pub fn mpfr_flags_test(arg1: mpfr_flags_t) -> mpfr_flags_t;
}
extern "C" {
    pub fn mpfr_flags_save() -> mpfr_flags_t;
}
extern "C" {
    pub fn mpfr_flags_restore(arg1: mpfr_flags_t, arg2: mpfr_flags_t);
}
extern "C" {
    pub fn mpfr_check_range(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_int,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_init2(arg1: mpfr_ptr, arg2: mpfr_prec_t);
}
extern "C" {
    pub fn mpfr_init(arg1: mpfr_ptr);
}
extern "C" {
    pub fn mpfr_clear(arg1: mpfr_ptr);
}
extern "C" {
    pub fn mpfr_inits2(arg1: mpfr_prec_t, arg2: mpfr_ptr, ...);
}
extern "C" {
    pub fn mpfr_inits(arg1: mpfr_ptr, ...);
}
extern "C" {
    pub fn mpfr_clears(arg1: mpfr_ptr, ...);
}
extern "C" {
    pub fn mpfr_prec_round(
        arg1: mpfr_ptr,
        arg2: mpfr_prec_t,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_can_round(
        arg1: mpfr_srcptr,
        arg2: mpfr_exp_t,
        arg3: mpfr_rnd_t,
        arg4: mpfr_rnd_t,
        arg5: mpfr_prec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_min_prec(arg1: mpfr_srcptr) -> mpfr_prec_t;
}
extern "C" {
    pub fn mpfr_get_exp(arg1: mpfr_srcptr) -> mpfr_exp_t;
}
extern "C" {
    pub fn mpfr_set_exp(arg1: mpfr_ptr, arg2: mpfr_exp_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_get_prec(arg1: mpfr_srcptr) -> mpfr_prec_t;
}
extern "C" {
    pub fn mpfr_set_prec(arg1: mpfr_ptr, arg2: mpfr_prec_t);
}
extern "C" {
    pub fn mpfr_set_prec_raw(arg1: mpfr_ptr, arg2: mpfr_prec_t);
}
extern "C" {
    pub fn mpfr_set_default_prec(arg1: mpfr_prec_t);
}
extern "C" {
    pub fn mpfr_get_default_prec() -> mpfr_prec_t;
}
extern "C" {
    pub fn mpfr_set_d(arg1: mpfr_ptr, arg2: f64, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_set_flt(arg1: mpfr_ptr, arg2: f32, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_set_ld(arg1: mpfr_ptr, arg2: u128, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_set_z(arg1: mpfr_ptr, arg2: mpz_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_set_z_2exp(
        arg1: mpfr_ptr,
        arg2: mpz_srcptr,
        arg3: mpfr_exp_t,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_set_nan(arg1: mpfr_ptr);
}
extern "C" {
    pub fn mpfr_set_inf(arg1: mpfr_ptr, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mpfr_set_zero(arg1: mpfr_ptr, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mpfr_set_f(arg1: mpfr_ptr, arg2: mpf_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_cmp_f(arg1: mpfr_srcptr, arg2: mpf_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_get_f(arg1: mpf_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_set_si(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_long,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_set_ui(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_set_si_2exp(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_long,
        arg3: mpfr_exp_t,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_set_ui_2exp(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: mpfr_exp_t,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_set_q(arg1: mpfr_ptr, arg2: mpq_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_mul_q(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpq_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_div_q(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpq_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_add_q(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpq_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sub_q(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpq_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_cmp_q(arg1: mpfr_srcptr, arg2: mpq_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_get_q(q: mpq_ptr, f: mpfr_srcptr);
}
extern "C" {
    pub fn mpfr_set_str(
        arg1: mpfr_ptr,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_init_set_str(
        arg1: mpfr_ptr,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_set4(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_rnd_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_abs(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_set(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_neg(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_signbit(arg1: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_setsign(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_int,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_copysign(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_get_z_2exp(arg1: mpz_ptr, arg2: mpfr_srcptr) -> mpfr_exp_t;
}
extern "C" {
    pub fn mpfr_get_flt(arg1: mpfr_srcptr, arg2: mpfr_rnd_t) -> f32;
}
extern "C" {
    pub fn mpfr_get_d(arg1: mpfr_srcptr, arg2: mpfr_rnd_t) -> f64;
}
extern "C" {
    pub fn mpfr_get_ld(arg1: mpfr_srcptr, arg2: mpfr_rnd_t) -> u128;
}
extern "C" {
    pub fn mpfr_get_d1(arg1: mpfr_srcptr) -> f64;
}
extern "C" {
    pub fn mpfr_get_d_2exp(
        arg1: *mut ::std::os::raw::c_long,
        arg2: mpfr_srcptr,
        arg3: mpfr_rnd_t,
    ) -> f64;
}
extern "C" {
    pub fn mpfr_get_ld_2exp(
        arg1: *mut ::std::os::raw::c_long,
        arg2: mpfr_srcptr,
        arg3: mpfr_rnd_t,
    ) -> u128;
}
extern "C" {
    pub fn mpfr_frexp(
        arg1: *mut mpfr_exp_t,
        arg2: mpfr_ptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_get_si(arg1: mpfr_srcptr, arg2: mpfr_rnd_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mpfr_get_ui(arg1: mpfr_srcptr, arg2: mpfr_rnd_t) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn mpfr_get_str_ndigits(arg1: ::std::os::raw::c_int, arg2: mpfr_prec_t) -> size_t;
}
extern "C" {
    pub fn mpfr_get_str(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut mpfr_exp_t,
        arg3: ::std::os::raw::c_int,
        arg4: size_t,
        arg5: mpfr_srcptr,
        arg6: mpfr_rnd_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mpfr_get_z(z: mpz_ptr, f: mpfr_srcptr, arg1: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_free_str(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn mpfr_urandom(
        arg1: mpfr_ptr,
        arg2: *mut __gmp_randstate_struct,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_grandom(
        arg1: mpfr_ptr,
        arg2: mpfr_ptr,
        arg3: *mut __gmp_randstate_struct,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_nrandom(
        arg1: mpfr_ptr,
        arg2: *mut __gmp_randstate_struct,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_erandom(
        arg1: mpfr_ptr,
        arg2: *mut __gmp_randstate_struct,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_urandomb(
        arg1: mpfr_ptr,
        arg2: *mut __gmp_randstate_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_nextabove(arg1: mpfr_ptr);
}
extern "C" {
    pub fn mpfr_nextbelow(arg1: mpfr_ptr);
}
extern "C" {
    pub fn mpfr_nexttoward(arg1: mpfr_ptr, arg2: mpfr_srcptr);
}
extern "C" {
    pub fn mpfr_printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_snprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: size_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_pow(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_pow_si(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_long,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_pow_ui(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_ulong,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_ui_pow_ui(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_ui_pow(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_pow_z(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpz_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sqrt(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sqrt_ui(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_rec_sqrt(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_add(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sub(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_mul(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_div(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_add_ui(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_ulong,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sub_ui(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_ulong,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_ui_sub(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_mul_ui(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_ulong,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_div_ui(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_ulong,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_ui_div(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_add_si(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_long,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sub_si(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_long,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_si_sub(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_long,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_mul_si(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_long,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_div_si(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_long,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_si_div(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_long,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_add_d(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: f64,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sub_d(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: f64,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_d_sub(
        arg1: mpfr_ptr,
        arg2: f64,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_mul_d(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: f64,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_div_d(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: f64,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_d_div(
        arg1: mpfr_ptr,
        arg2: f64,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sqr(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_const_pi(arg1: mpfr_ptr, arg2: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_const_log2(arg1: mpfr_ptr, arg2: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_const_euler(arg1: mpfr_ptr, arg2: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_const_catalan(arg1: mpfr_ptr, arg2: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_agm(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_log(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_log2(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_log10(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_log1p(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_log_ui(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_exp(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_exp2(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_exp10(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_expm1(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_eint(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_li2(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_cmp(arg1: mpfr_srcptr, arg2: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_cmp3(
        arg1: mpfr_srcptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_cmp_d(arg1: mpfr_srcptr, arg2: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_cmp_ld(arg1: mpfr_srcptr, arg2: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_cmp_ui(arg1: mpfr_srcptr, arg2: ::std::os::raw::c_ulong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_cmp_si(arg1: mpfr_srcptr, arg2: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_cmp_ui_2exp(
        arg1: mpfr_srcptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: mpfr_exp_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_cmp_si_2exp(
        arg1: mpfr_srcptr,
        arg2: ::std::os::raw::c_long,
        arg3: mpfr_exp_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_cmpabs(arg1: mpfr_srcptr, arg2: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_cmpabs_ui(
        arg1: mpfr_srcptr,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_reldiff(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_srcptr, arg4: mpfr_rnd_t);
}
extern "C" {
    pub fn mpfr_eq(
        arg1: mpfr_srcptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sgn(arg1: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_mul_2exp(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_ulong,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_div_2exp(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_ulong,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_mul_2ui(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_ulong,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_div_2ui(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_ulong,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_mul_2si(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_long,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_div_2si(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_long,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_rint(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_roundeven(arg1: mpfr_ptr, arg2: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_round(arg1: mpfr_ptr, arg2: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_trunc(arg1: mpfr_ptr, arg2: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_ceil(arg1: mpfr_ptr, arg2: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_floor(arg1: mpfr_ptr, arg2: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_rint_roundeven(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_rint_round(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_rint_trunc(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_rint_ceil(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_rint_floor(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_frac(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_modf(
        arg1: mpfr_ptr,
        arg2: mpfr_ptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_remquo(
        arg1: mpfr_ptr,
        arg2: *mut ::std::os::raw::c_long,
        arg3: mpfr_srcptr,
        arg4: mpfr_srcptr,
        arg5: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_remainder(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_fmod(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_fmodquo(
        arg1: mpfr_ptr,
        arg2: *mut ::std::os::raw::c_long,
        arg3: mpfr_srcptr,
        arg4: mpfr_srcptr,
        arg5: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_fits_ulong_p(arg1: mpfr_srcptr, arg2: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_fits_slong_p(arg1: mpfr_srcptr, arg2: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_fits_uint_p(arg1: mpfr_srcptr, arg2: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_fits_sint_p(arg1: mpfr_srcptr, arg2: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_fits_ushort_p(arg1: mpfr_srcptr, arg2: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_fits_sshort_p(arg1: mpfr_srcptr, arg2: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_fits_uintmax_p(arg1: mpfr_srcptr, arg2: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_fits_intmax_p(arg1: mpfr_srcptr, arg2: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_extract(arg1: mpz_ptr, arg2: mpfr_srcptr, arg3: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn mpfr_swap(arg1: mpfr_ptr, arg2: mpfr_ptr);
}
extern "C" {
    pub fn mpfr_dump(arg1: mpfr_srcptr);
}
extern "C" {
    pub fn mpfr_nan_p(arg1: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_inf_p(arg1: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_number_p(arg1: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_integer_p(arg1: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_zero_p(arg1: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_regular_p(arg1: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_greater_p(arg1: mpfr_srcptr, arg2: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_greaterequal_p(arg1: mpfr_srcptr, arg2: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_less_p(arg1: mpfr_srcptr, arg2: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_lessequal_p(arg1: mpfr_srcptr, arg2: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_lessgreater_p(arg1: mpfr_srcptr, arg2: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_equal_p(arg1: mpfr_srcptr, arg2: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_unordered_p(arg1: mpfr_srcptr, arg2: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_atanh(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_acosh(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_asinh(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_cosh(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sinh(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_tanh(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sinh_cosh(
        arg1: mpfr_ptr,
        arg2: mpfr_ptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sech(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_csch(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_coth(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_acos(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_asin(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_atan(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sin(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sin_cos(
        arg1: mpfr_ptr,
        arg2: mpfr_ptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_cos(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_tan(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_atan2(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sec(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_csc(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_cot(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_hypot(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_erf(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_erfc(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_cbrt(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_root(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_ulong,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_rootn_ui(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_ulong,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_gamma(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_gamma_inc(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_beta(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_lngamma(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_lgamma(
        arg1: mpfr_ptr,
        arg2: *mut ::std::os::raw::c_int,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_digamma(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_zeta(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_zeta_ui(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_fac_ui(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_j0(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_j1(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_jn(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_long,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_y0(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_y1(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_yn(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_long,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_ai(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_min(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_max(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_dim(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_mul_z(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpz_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_div_z(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpz_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_add_z(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpz_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sub_z(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpz_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_z_sub(
        arg1: mpfr_ptr,
        arg2: mpz_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_cmp_z(arg1: mpfr_srcptr, arg2: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_fma(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_srcptr,
        arg5: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_fms(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_srcptr,
        arg5: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_fmma(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_srcptr,
        arg5: mpfr_srcptr,
        arg6: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_fmms(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_srcptr,
        arg5: mpfr_srcptr,
        arg6: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sum(
        arg1: mpfr_ptr,
        arg2: *const mpfr_ptr,
        arg3: ::std::os::raw::c_ulong,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_dot(
        arg1: mpfr_ptr,
        arg2: *const mpfr_ptr,
        arg3: *const mpfr_ptr,
        arg4: ::std::os::raw::c_ulong,
        arg5: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_free_cache();
}
extern "C" {
    pub fn mpfr_free_cache2(arg1: mpfr_free_cache_t);
}
extern "C" {
    pub fn mpfr_free_pool();
}
extern "C" {
    pub fn mpfr_mp_memory_cleanup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_subnormalize(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_int,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_strtofr(
        arg1: mpfr_ptr,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
        arg5: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_round_nearest_away_begin(arg1: *mut __mpfr_struct);
}
extern "C" {
    pub fn mpfr_round_nearest_away_end(
        arg1: *mut __mpfr_struct,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_custom_get_size(arg1: mpfr_prec_t) -> size_t;
}
extern "C" {
    pub fn mpfr_custom_init(arg1: *mut ::std::os::raw::c_void, arg2: mpfr_prec_t);
}
extern "C" {
    pub fn mpfr_custom_get_significand(arg1: mpfr_srcptr) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mpfr_custom_get_exp(arg1: mpfr_srcptr) -> mpfr_exp_t;
}
extern "C" {
    pub fn mpfr_custom_move(arg1: mpfr_ptr, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn mpfr_custom_init_set(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_int,
        arg3: mpfr_exp_t,
        arg4: mpfr_prec_t,
        arg5: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn mpfr_custom_get_kind(arg1: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_total_order_p(arg1: mpfr_srcptr, arg2: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpfr_set_sj(
        arg1: *mut __mpfr_struct,
        arg2: intmax_t,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpfr_set_sj_2exp(
        arg1: *mut __mpfr_struct,
        arg2: intmax_t,
        arg3: intmax_t,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpfr_set_uj(
        arg1: *mut __mpfr_struct,
        arg2: uintmax_t,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpfr_set_uj_2exp(
        arg1: *mut __mpfr_struct,
        arg2: uintmax_t,
        arg3: intmax_t,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpfr_mpfr_get_sj(arg1: mpfr_srcptr, arg2: mpfr_rnd_t) -> intmax_t;
}
extern "C" {
    pub fn __gmpfr_mpfr_get_uj(arg1: mpfr_srcptr, arg2: mpfr_rnd_t) -> uintmax_t;
}
extern "C" {
    pub fn __gmpfr_inp_str(
        arg1: mpfr_ptr,
        arg2: *mut FILE,
        arg3: ::std::os::raw::c_int,
        arg4: mpfr_rnd_t,
    ) -> size_t;
}
extern "C" {
    pub fn __gmpfr_out_str(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_int,
        arg3: size_t,
        arg4: mpfr_srcptr,
        arg5: mpfr_rnd_t,
    ) -> size_t;
}
extern "C" {
    pub fn __gmpfr_fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpfr_fpif_export(arg1: *mut FILE, arg2: mpfr_ptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpfr_fpif_import(arg1: mpfr_ptr, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpfr_vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpfr_vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpfr_vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpfr_vsnprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: size_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpfr_vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
pub type bool_ = ::std::os::raw::c_char;
pub const false_: bool_ = 0;
pub const true_: bool_ = 1;
pub const elina_scalar_discr_t_ELINA_SCALAR_DOUBLE: elina_scalar_discr_t = 0;
pub const elina_scalar_discr_t_ELINA_SCALAR_MPQ: elina_scalar_discr_t = 1;
pub const elina_scalar_discr_t_ELINA_SCALAR_MPFR: elina_scalar_discr_t = 2;
pub type elina_scalar_discr_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct elina_scalar_t {
    pub discr: elina_scalar_discr_t,
    pub val: elina_scalar_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union elina_scalar_t__bindgen_ty_1 {
    pub dbl: f64,
    pub mpq: mpq_ptr,
    pub mpfr: mpfr_ptr,
}
#[test]
fn bindgen_test_layout_elina_scalar_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<elina_scalar_t__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(elina_scalar_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<elina_scalar_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(elina_scalar_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<elina_scalar_t__bindgen_ty_1>())).dbl as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_scalar_t__bindgen_ty_1),
            "::",
            stringify!(dbl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<elina_scalar_t__bindgen_ty_1>())).mpq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_scalar_t__bindgen_ty_1),
            "::",
            stringify!(mpq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<elina_scalar_t__bindgen_ty_1>())).mpfr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_scalar_t__bindgen_ty_1),
            "::",
            stringify!(mpfr)
        )
    );
}
#[test]
fn bindgen_test_layout_elina_scalar_t() {
    assert_eq!(
        ::std::mem::size_of::<elina_scalar_t>(),
        16usize,
        concat!("Size of: ", stringify!(elina_scalar_t))
    );
    assert_eq!(
        ::std::mem::align_of::<elina_scalar_t>(),
        8usize,
        concat!("Alignment of ", stringify!(elina_scalar_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_scalar_t>())).discr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_scalar_t),
            "::",
            stringify!(discr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_scalar_t>())).val as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_scalar_t),
            "::",
            stringify!(val)
        )
    );
}
extern "C" {
    pub fn elina_scalar_alloc() -> *mut elina_scalar_t;
}
extern "C" {
    pub fn elina_scalar_free(scalar: *mut elina_scalar_t);
}
extern "C" {
    pub fn elina_scalar_reinit(scalar: *mut elina_scalar_t, d: elina_scalar_discr_t);
}
extern "C" {
    pub fn elina_scalar_print(a: *mut elina_scalar_t);
}
extern "C" {
    pub fn elina_scalar_fprint(stream: *mut FILE, a: *mut elina_scalar_t);
}
extern "C" {
    pub static mut elina_scalar_print_prec: ::std::os::raw::c_int;
}
extern "C" {
    pub fn elina_scalar_swap(a: *mut elina_scalar_t, b: *mut elina_scalar_t);
}
extern "C" {
    pub fn elina_scalar_set(scalar: *mut elina_scalar_t, scalar2: *mut elina_scalar_t);
}
extern "C" {
    pub fn elina_scalar_set_mpq(scalar: *mut elina_scalar_t, mpq: *mut __mpq_struct);
}
extern "C" {
    pub fn elina_scalar_set_int(scalar: *mut elina_scalar_t, i: ::std::os::raw::c_long);
}
extern "C" {
    pub fn elina_scalar_set_frac(
        scalar: *mut elina_scalar_t,
        i: ::std::os::raw::c_long,
        j: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn elina_scalar_set_double(scalar: *mut elina_scalar_t, k: f64);
}
extern "C" {
    pub fn elina_scalar_set_mpfr(scalar: *mut elina_scalar_t, mpfr: *mut __mpfr_struct);
}
extern "C" {
    pub fn elina_scalar_set_infty(scalar: *mut elina_scalar_t, sgn: ::std::os::raw::c_int);
}
extern "C" {
    pub fn elina_scalar_alloc_set(scalar2: *mut elina_scalar_t) -> *mut elina_scalar_t;
}
extern "C" {
    pub fn elina_scalar_alloc_set_mpq(mpq: *mut __mpq_struct) -> *mut elina_scalar_t;
}
extern "C" {
    pub fn elina_scalar_alloc_set_double(k: f64) -> *mut elina_scalar_t;
}
extern "C" {
    pub fn elina_scalar_alloc_set_mpfr(mpfr: *mut __mpfr_struct) -> *mut elina_scalar_t;
}
extern "C" {
    pub fn elina_mpq_set_scalar(
        mpq: *mut __mpq_struct,
        scalar: *mut elina_scalar_t,
        round: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn elina_double_set_scalar(
        k: *mut f64,
        scalar: *mut elina_scalar_t,
        round: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn elina_mpfr_set_scalar(
        mpfr: *mut __mpfr_struct,
        scalar: *mut elina_scalar_t,
        round: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn elina_scalar_infty(scalar: *mut elina_scalar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn elina_scalar_cmp(
        a: *mut elina_scalar_t,
        b: *mut elina_scalar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn elina_scalar_cmp_int(
        a: *mut elina_scalar_t,
        b: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn elina_scalar_equal(a: *mut elina_scalar_t, b: *mut elina_scalar_t) -> bool_;
}
extern "C" {
    pub fn elina_scalar_equal_int(a: *mut elina_scalar_t, b: ::std::os::raw::c_int) -> bool_;
}
extern "C" {
    pub fn elina_scalar_sgn(a: *mut elina_scalar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn elina_scalar_neg(a: *mut elina_scalar_t, b: *mut elina_scalar_t);
}
extern "C" {
    pub fn elina_scalar_inv(a: *mut elina_scalar_t, b: *mut elina_scalar_t);
}
extern "C" {
    pub fn elina_scalar_hash(a: *mut elina_scalar_t) -> ::std::os::raw::c_long;
}
pub type elina_int_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elina_rat_t {
    pub n: elina_int_t,
    pub d: elina_int_t,
}
#[test]
fn bindgen_test_layout_elina_rat_t() {
    assert_eq!(
        ::std::mem::size_of::<elina_rat_t>(),
        16usize,
        concat!("Size of: ", stringify!(elina_rat_t))
    );
    assert_eq!(
        ::std::mem::align_of::<elina_rat_t>(),
        8usize,
        concat!("Alignment of ", stringify!(elina_rat_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_rat_t>())).n as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_rat_t),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_rat_t>())).d as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_rat_t),
            "::",
            stringify!(d)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct comp_t {
    pub num: ::std::os::raw::c_ushort,
    pub next: *mut comp_t,
}
#[test]
fn bindgen_test_layout_comp_t() {
    assert_eq!(
        ::std::mem::size_of::<comp_t>(),
        16usize,
        concat!("Size of: ", stringify!(comp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<comp_t>(),
        8usize,
        concat!("Alignment of ", stringify!(comp_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<comp_t>())).num as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(comp_t),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<comp_t>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(comp_t),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct comp_list_t {
    pub head: *mut comp_t,
    pub next: *mut comp_list_t,
    pub size: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_comp_list_t() {
    assert_eq!(
        ::std::mem::size_of::<comp_list_t>(),
        24usize,
        concat!("Size of: ", stringify!(comp_list_t))
    );
    assert_eq!(
        ::std::mem::align_of::<comp_list_t>(),
        8usize,
        concat!("Alignment of ", stringify!(comp_list_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<comp_list_t>())).head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(comp_list_t),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<comp_list_t>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(comp_list_t),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<comp_list_t>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(comp_list_t),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct array_comp_list_t {
    pub head: *mut comp_list_t,
    pub size: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_array_comp_list_t() {
    assert_eq!(
        ::std::mem::size_of::<array_comp_list_t>(),
        16usize,
        concat!("Size of: ", stringify!(array_comp_list_t))
    );
    assert_eq!(
        ::std::mem::align_of::<array_comp_list_t>(),
        8usize,
        concat!("Alignment of ", stringify!(array_comp_list_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<array_comp_list_t>())).head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(array_comp_list_t),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<array_comp_list_t>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(array_comp_list_t),
            "::",
            stringify!(size)
        )
    );
}
extern "C" {
    pub fn create_comp_list() -> *mut comp_list_t;
}
extern "C" {
    pub fn copy_comp_list(src: *mut comp_list_t) -> *mut comp_list_t;
}
extern "C" {
    pub fn free_comp_list(cl: *mut comp_list_t);
}
extern "C" {
    pub fn comp_list_size(cl: *mut comp_list_t) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn insert_comp(cl: *mut comp_list_t, num: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn contains_comp(
        cl: *mut comp_list_t,
        num: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove_comp(cl: *mut comp_list_t, num: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn fprint_comp_list(stream: *mut FILE, cl: *mut comp_list_t, n: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn print_comp_list(cl: *mut comp_list_t, n: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn to_sorted_array(
        cl: *mut comp_list_t,
        n: ::std::os::raw::c_ushort,
    ) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn map_index(
        dst: *mut ::std::os::raw::c_ushort,
        src: *mut ::std::os::raw::c_ushort,
        comp_size: ::std::os::raw::c_ushort,
    ) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn intersection_comp_list(
        c1: *mut comp_list_t,
        c2: *mut comp_list_t,
        n: ::std::os::raw::c_ushort,
    ) -> *mut comp_list_t;
}
extern "C" {
    pub fn is_disjoint(
        cl1: *mut comp_list_t,
        cl2: *mut comp_list_t,
        n: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn is_disjoint_with_map(
        cl: *mut comp_list_t,
        map: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn is_map_disjoint(
        cmap: *mut ::std::os::raw::c_ushort,
        map2: *mut ::std::os::raw::c_char,
        n: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn is_included(
        cl1: *mut comp_list_t,
        cl2: *mut comp_list_t,
        n: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn union_comp_list(
        cl1: *mut comp_list_t,
        cl2: *mut comp_list_t,
        map: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn union_comp_list_direct(
        cl1: *mut comp_list_t,
        cl2: *mut comp_list_t,
        n: ::std::os::raw::c_ushort,
    );
}
extern "C" {
    pub fn unite_comp_lists(
        cl1: *mut comp_list_t,
        cl2: *mut comp_list_t,
        map: *mut ::std::os::raw::c_char,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
        n: ::std::os::raw::c_ushort,
    );
}
extern "C" {
    pub fn create_map(
        cl: *mut comp_list_t,
        n: ::std::os::raw::c_ushort,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn is_equal_map(
        map1: *mut ::std::os::raw::c_char,
        map2: *mut ::std::os::raw::c_char,
        n: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn create_array_comp_list() -> *mut array_comp_list_t;
}
extern "C" {
    pub fn copy_array_comp_list(src: *mut array_comp_list_t) -> *mut array_comp_list_t;
}
extern "C" {
    pub fn free_array_comp_list(acl: *mut array_comp_list_t);
}
extern "C" {
    pub fn insert_comp_list(acl: *mut array_comp_list_t, cl: *mut comp_list_t);
}
extern "C" {
    pub fn insert_comp_list_tail(acl: *mut array_comp_list_t, cl: *mut comp_list_t);
}
extern "C" {
    pub fn insert_comp_list_with_union(
        acl: *mut array_comp_list_t,
        cl: *mut comp_list_t,
        n: ::std::os::raw::c_ushort,
    );
}
extern "C" {
    pub fn find(acl: *mut array_comp_list_t, num: ::std::os::raw::c_ushort) -> *mut comp_list_t;
}
extern "C" {
    pub fn find_index(acl: *mut array_comp_list_t, cl: *mut comp_list_t)
        -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn remove_comp_list(acl: *mut array_comp_list_t, cl: *mut comp_list_t);
}
extern "C" {
    pub fn print_array_comp_list(acl: *mut array_comp_list_t, n: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn clear_array_comp_list(acl: *mut array_comp_list_t);
}
extern "C" {
    pub fn create_array_map(
        acl: *mut array_comp_list_t,
        n: ::std::os::raw::c_ushort,
    ) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn compute_diff(
        map: *mut ::std::os::raw::c_char,
        cl: *mut comp_list_t,
        n: ::std::os::raw::c_ushort,
    ) -> *mut comp_list_t;
}
extern "C" {
    pub fn intersection_array_comp_list(
        acl1: *mut array_comp_list_t,
        acl2: *mut array_comp_list_t,
        n: ::std::os::raw::c_ushort,
    ) -> *mut array_comp_list_t;
}
extern "C" {
    pub fn intersection_comp_list_compute_diff(
        c1: *mut comp_list_t,
        c2: *mut comp_list_t,
        n: ::std::os::raw::c_ushort,
    ) -> *mut array_comp_list_t;
}
extern "C" {
    pub fn intersection_comp_list_compute_diff_both(
        c1: *mut comp_list_t,
        c2: *mut comp_list_t,
        n: ::std::os::raw::c_ushort,
    ) -> *mut array_comp_list_t;
}
extern "C" {
    pub fn comp_array_union_direct(
        acl1: *mut array_comp_list_t,
        acl2: *mut array_comp_list_t,
        om1: *mut ::std::os::raw::c_ushort,
        om2: *mut ::std::os::raw::c_ushort,
        n: ::std::os::raw::c_ushort,
    ) -> *mut comp_list_t;
}
extern "C" {
    pub fn union_array_comp_list(
        acl1: *mut array_comp_list_t,
        acl2: *mut array_comp_list_t,
        n: ::std::os::raw::c_ushort,
    ) -> *mut array_comp_list_t;
}
extern "C" {
    pub fn is_equal_array_comp_list(
        acl1: *mut array_comp_list_t,
        acl2: *mut array_comp_list_t,
        n: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn is_lequal_array_comp_list(
        acl1: *mut array_comp_list_t,
        acl2: *mut array_comp_list_t,
        n: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn is_connected(
        acl: *mut array_comp_list_t,
        i: ::std::os::raw::c_ushort,
        j: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn is_comp_list_included(
        acl: *mut array_comp_list_t,
        cl: *mut comp_list_t,
        n: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn is_covered(
        acl: *mut array_comp_list_t,
        clr: *mut comp_list_t,
        n: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn create_intersection_map(
        acl1: *mut array_comp_list_t,
        acl2: *mut array_comp_list_t,
        num: ::std::os::raw::c_ushort,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn extract(m: *mut f64, n: ::std::os::raw::c_ushort) -> *mut array_comp_list_t;
}
extern "C" {
    pub fn extract_comps(
        m: *mut ::std::os::raw::c_char,
        n: ::std::os::raw::c_ushort,
    ) -> *mut array_comp_list_t;
}
extern "C" {
    pub fn comp_list_serialize_common(
        dst: *mut ::std::os::raw::c_void,
        cl: *mut comp_list_t,
        length: ::std::os::raw::c_ushort,
        dry_run: ::std::os::raw::c_int,
    ) -> size_t;
}
extern "C" {
    pub fn array_comp_list_serialize_common(
        dst: *mut ::std::os::raw::c_void,
        acl: *mut array_comp_list_t,
        dry_run: ::std::os::raw::c_int,
    ) -> size_t;
}
extern "C" {
    pub fn comp_list_deserialize(
        p: *mut ::std::os::raw::c_void,
        length: ::std::os::raw::c_ushort,
        size: *mut size_t,
    ) -> *mut comp_list_t;
}
extern "C" {
    pub fn array_comp_list_deserialize(
        p: *mut ::std::os::raw::c_void,
        size: *mut size_t,
    ) -> *mut array_comp_list_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elina_interval_t {
    pub inf: *mut elina_scalar_t,
    pub sup: *mut elina_scalar_t,
}
#[test]
fn bindgen_test_layout_elina_interval_t() {
    assert_eq!(
        ::std::mem::size_of::<elina_interval_t>(),
        16usize,
        concat!("Size of: ", stringify!(elina_interval_t))
    );
    assert_eq!(
        ::std::mem::align_of::<elina_interval_t>(),
        8usize,
        concat!("Alignment of ", stringify!(elina_interval_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_interval_t>())).inf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_interval_t),
            "::",
            stringify!(inf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_interval_t>())).sup as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_interval_t),
            "::",
            stringify!(sup)
        )
    );
}
extern "C" {
    pub fn elina_interval_alloc() -> *mut elina_interval_t;
}
extern "C" {
    pub fn elina_interval_reinit(
        interval: *mut elina_interval_t,
        elina_scalar_discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_interval_free(interval: *mut elina_interval_t);
}
extern "C" {
    pub fn elina_interval_fprint(stream: *mut FILE, a: *mut elina_interval_t);
}
extern "C" {
    pub fn elina_interval_print(a: *mut elina_interval_t);
}
extern "C" {
    pub fn elina_interval_swap(a: *mut elina_interval_t, b: *mut elina_interval_t);
}
extern "C" {
    pub fn elina_interval_set(interval: *mut elina_interval_t, interval2: *mut elina_interval_t);
}
extern "C" {
    pub fn elina_interval_set_scalar(
        interval: *mut elina_interval_t,
        inf: *mut elina_scalar_t,
        sup: *mut elina_scalar_t,
    );
}
extern "C" {
    pub fn elina_interval_set_mpq(
        interval: *mut elina_interval_t,
        inf: *mut __mpq_struct,
        sup: *mut __mpq_struct,
    );
}
extern "C" {
    pub fn elina_interval_set_int(
        interval: *mut elina_interval_t,
        inf: ::std::os::raw::c_long,
        sup: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn elina_interval_set_frac(
        interval: *mut elina_interval_t,
        numinf: ::std::os::raw::c_long,
        deninf: ::std::os::raw::c_ulong,
        numsup: ::std::os::raw::c_long,
        densup: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn elina_interval_set_double(interval: *mut elina_interval_t, inf: f64, sup: f64);
}
extern "C" {
    pub fn elina_interval_set_mpfr(
        interval: *mut elina_interval_t,
        inf: *mut __mpfr_struct,
        sup: *mut __mpfr_struct,
    );
}
extern "C" {
    pub fn elina_interval_set_top(interval: *mut elina_interval_t);
}
extern "C" {
    pub fn elina_interval_set_bottom(interval: *mut elina_interval_t);
}
extern "C" {
    pub fn elina_interval_alloc_set(interval: *mut elina_interval_t) -> *mut elina_interval_t;
}
extern "C" {
    pub fn elina_interval_is_top(interval: *mut elina_interval_t) -> bool_;
}
extern "C" {
    pub fn elina_interval_is_bottom(interval: *mut elina_interval_t) -> bool_;
}
extern "C" {
    pub fn elina_interval_is_leq(i1: *mut elina_interval_t, i2: *mut elina_interval_t) -> bool_;
}
extern "C" {
    pub fn elina_interval_cmp(
        i1: *mut elina_interval_t,
        i2: *mut elina_interval_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn elina_interval_equal(i1: *mut elina_interval_t, i2: *mut elina_interval_t) -> bool_;
}
extern "C" {
    pub fn elina_interval_equal_int(i: *mut elina_interval_t, b: ::std::os::raw::c_int) -> bool_;
}
extern "C" {
    pub fn elina_interval_neg(a: *mut elina_interval_t, b: *mut elina_interval_t);
}
extern "C" {
    pub fn elina_interval_hash(itv: *mut elina_interval_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn elina_interval_array_alloc(size: size_t) -> *mut *mut elina_interval_t;
}
extern "C" {
    pub fn elina_interval_array_free(array: *mut *mut elina_interval_t, size: size_t);
}
pub const elina_coeff_discr_t_ELINA_COEFF_SCALAR: elina_coeff_discr_t = 0;
pub const elina_coeff_discr_t_ELINA_COEFF_INTERVAL: elina_coeff_discr_t = 1;
pub type elina_coeff_discr_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct elina_coeff_t {
    pub discr: elina_coeff_discr_t,
    pub val: elina_coeff_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union elina_coeff_t__bindgen_ty_1 {
    pub scalar: *mut elina_scalar_t,
    pub interval: *mut elina_interval_t,
}
#[test]
fn bindgen_test_layout_elina_coeff_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<elina_coeff_t__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(elina_coeff_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<elina_coeff_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(elina_coeff_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<elina_coeff_t__bindgen_ty_1>())).scalar as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_coeff_t__bindgen_ty_1),
            "::",
            stringify!(scalar)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<elina_coeff_t__bindgen_ty_1>())).interval as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_coeff_t__bindgen_ty_1),
            "::",
            stringify!(interval)
        )
    );
}
#[test]
fn bindgen_test_layout_elina_coeff_t() {
    assert_eq!(
        ::std::mem::size_of::<elina_coeff_t>(),
        16usize,
        concat!("Size of: ", stringify!(elina_coeff_t))
    );
    assert_eq!(
        ::std::mem::align_of::<elina_coeff_t>(),
        8usize,
        concat!("Alignment of ", stringify!(elina_coeff_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_coeff_t>())).discr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_coeff_t),
            "::",
            stringify!(discr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_coeff_t>())).val as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_coeff_t),
            "::",
            stringify!(val)
        )
    );
}
extern "C" {
    pub fn elina_coeff_alloc(elina_coeff_discr: elina_coeff_discr_t) -> *mut elina_coeff_t;
}
extern "C" {
    pub fn elina_coeff_reinit(
        coeff: *mut elina_coeff_t,
        elina_coeff_discr: elina_coeff_discr_t,
        elina_scalar_discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_coeff_free(a: *mut elina_coeff_t);
}
extern "C" {
    pub fn elina_coeff_fprint(stream: *mut FILE, a: *mut elina_coeff_t);
}
extern "C" {
    pub fn elina_coeff_print(a: *mut elina_coeff_t);
}
extern "C" {
    pub fn elina_coeff_reduce(coeff: *mut elina_coeff_t);
}
extern "C" {
    pub fn elina_coeff_swap(a: *mut elina_coeff_t, b: *mut elina_coeff_t);
}
extern "C" {
    pub fn elina_coeff_set(a: *mut elina_coeff_t, b: *mut elina_coeff_t);
}
extern "C" {
    pub fn elina_coeff_set_scalar(coeff: *mut elina_coeff_t, scalar: *mut elina_scalar_t);
}
extern "C" {
    pub fn elina_coeff_set_scalar_mpq(coeff: *mut elina_coeff_t, mpq: *mut __mpq_struct);
}
extern "C" {
    pub fn elina_coeff_set_scalar_int(coeff: *mut elina_coeff_t, num: ::std::os::raw::c_long);
}
extern "C" {
    pub fn elina_coeff_set_scalar_frac(
        coeff: *mut elina_coeff_t,
        num: ::std::os::raw::c_long,
        den: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn elina_coeff_set_scalar_double(coeff: *mut elina_coeff_t, num: f64);
}
extern "C" {
    pub fn elina_coeff_set_scalar_mpfr(coeff: *mut elina_coeff_t, mpfr: *mut __mpfr_struct);
}
extern "C" {
    pub fn elina_coeff_set_interval(coeff: *mut elina_coeff_t, itv: *mut elina_interval_t);
}
extern "C" {
    pub fn elina_coeff_set_interval_scalar(
        coeff: *mut elina_coeff_t,
        inf: *mut elina_scalar_t,
        sup: *mut elina_scalar_t,
    );
}
extern "C" {
    pub fn elina_coeff_set_interval_mpq(
        coeff: *mut elina_coeff_t,
        inf: *mut __mpq_struct,
        sup: *mut __mpq_struct,
    );
}
extern "C" {
    pub fn elina_coeff_set_interval_int(
        coeff: *mut elina_coeff_t,
        inf: ::std::os::raw::c_long,
        sup: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn elina_coeff_set_interval_frac(
        coeff: *mut elina_coeff_t,
        numinf: ::std::os::raw::c_long,
        deninf: ::std::os::raw::c_ulong,
        numsup: ::std::os::raw::c_long,
        densup: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn elina_coeff_set_interval_double(coeff: *mut elina_coeff_t, inf: f64, sup: f64);
}
extern "C" {
    pub fn elina_coeff_set_interval_top(coeff: *mut elina_coeff_t);
}
extern "C" {
    pub fn elina_coeff_set_interval_mpfr(
        coeff: *mut elina_coeff_t,
        inf: *mut __mpfr_struct,
        sup: *mut __mpfr_struct,
    );
}
extern "C" {
    pub fn elina_coeff_alloc_set(coeff: *mut elina_coeff_t) -> *mut elina_coeff_t;
}
extern "C" {
    pub fn elina_coeff_alloc_set_scalar(scalar: *mut elina_scalar_t) -> *mut elina_coeff_t;
}
extern "C" {
    pub fn elina_coeff_alloc_set_interval(interval: *mut elina_interval_t) -> *mut elina_coeff_t;
}
extern "C" {
    pub fn elina_coeff_cmp(
        coeff1: *mut elina_coeff_t,
        coeff2: *mut elina_coeff_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn elina_coeff_equal(coeff1: *mut elina_coeff_t, coeff2: *mut elina_coeff_t) -> bool_;
}
extern "C" {
    pub fn elina_coeff_zero(coeff: *mut elina_coeff_t) -> bool_;
}
extern "C" {
    pub fn elina_coeff_equal_int(coeff: *mut elina_coeff_t, i: ::std::os::raw::c_int) -> bool_;
}
extern "C" {
    pub fn elina_coeff_neg(a: *mut elina_coeff_t, b: *mut elina_coeff_t);
}
extern "C" {
    pub fn elina_coeff_hash(coeff: *mut elina_coeff_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn elina_coeff_init(coeff: *mut elina_coeff_t, elina_coeff_discr: elina_coeff_discr_t);
}
extern "C" {
    pub fn elina_coeff_init_set(coeff: *mut elina_coeff_t, coeff2: *mut elina_coeff_t);
}
extern "C" {
    pub fn elina_coeff_clear(coeff: *mut elina_coeff_t);
}
pub type elina_dim_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elina_dimension_t {
    pub intdim: size_t,
    pub realdim: size_t,
}
#[test]
fn bindgen_test_layout_elina_dimension_t() {
    assert_eq!(
        ::std::mem::size_of::<elina_dimension_t>(),
        16usize,
        concat!("Size of: ", stringify!(elina_dimension_t))
    );
    assert_eq!(
        ::std::mem::align_of::<elina_dimension_t>(),
        8usize,
        concat!("Alignment of ", stringify!(elina_dimension_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_dimension_t>())).intdim as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_dimension_t),
            "::",
            stringify!(intdim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_dimension_t>())).realdim as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_dimension_t),
            "::",
            stringify!(realdim)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elina_dimchange_t {
    pub dim: *mut elina_dim_t,
    pub intdim: size_t,
    pub realdim: size_t,
}
#[test]
fn bindgen_test_layout_elina_dimchange_t() {
    assert_eq!(
        ::std::mem::size_of::<elina_dimchange_t>(),
        24usize,
        concat!("Size of: ", stringify!(elina_dimchange_t))
    );
    assert_eq!(
        ::std::mem::align_of::<elina_dimchange_t>(),
        8usize,
        concat!("Alignment of ", stringify!(elina_dimchange_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_dimchange_t>())).dim as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_dimchange_t),
            "::",
            stringify!(dim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_dimchange_t>())).intdim as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_dimchange_t),
            "::",
            stringify!(intdim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_dimchange_t>())).realdim as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_dimchange_t),
            "::",
            stringify!(realdim)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elina_dimchange2_t {
    pub add: *mut elina_dimchange_t,
    pub remove: *mut elina_dimchange_t,
}
#[test]
fn bindgen_test_layout_elina_dimchange2_t() {
    assert_eq!(
        ::std::mem::size_of::<elina_dimchange2_t>(),
        16usize,
        concat!("Size of: ", stringify!(elina_dimchange2_t))
    );
    assert_eq!(
        ::std::mem::align_of::<elina_dimchange2_t>(),
        8usize,
        concat!("Alignment of ", stringify!(elina_dimchange2_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_dimchange2_t>())).add as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_dimchange2_t),
            "::",
            stringify!(add)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_dimchange2_t>())).remove as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_dimchange2_t),
            "::",
            stringify!(remove)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elina_dimperm_t {
    pub dim: *mut elina_dim_t,
    pub size: size_t,
}
#[test]
fn bindgen_test_layout_elina_dimperm_t() {
    assert_eq!(
        ::std::mem::size_of::<elina_dimperm_t>(),
        16usize,
        concat!("Size of: ", stringify!(elina_dimperm_t))
    );
    assert_eq!(
        ::std::mem::align_of::<elina_dimperm_t>(),
        8usize,
        concat!("Alignment of ", stringify!(elina_dimperm_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_dimperm_t>())).dim as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_dimperm_t),
            "::",
            stringify!(dim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_dimperm_t>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_dimperm_t),
            "::",
            stringify!(size)
        )
    );
}
extern "C" {
    pub fn elina_dimchange_init(dimchange: *mut elina_dimchange_t, intdim: size_t, realdim: size_t);
}
extern "C" {
    pub fn elina_dimchange_alloc(intdim: size_t, realdim: size_t) -> *mut elina_dimchange_t;
}
extern "C" {
    pub fn elina_dimchange_clear(dimchange: *mut elina_dimchange_t);
}
extern "C" {
    pub fn elina_dimchange_free(dimchange: *mut elina_dimchange_t);
}
extern "C" {
    pub fn elina_dimchange_fprint(stream: *mut FILE, dimchange: *mut elina_dimchange_t);
}
extern "C" {
    pub fn elina_dimchange_add_invert(dimchange: *mut elina_dimchange_t);
}
extern "C" {
    pub fn elina_dimchange2_init(
        dimchange2: *mut elina_dimchange2_t,
        add: *mut elina_dimchange_t,
        remove: *mut elina_dimchange_t,
    );
}
extern "C" {
    pub fn elina_dimchange2_alloc(
        add: *mut elina_dimchange_t,
        remove: *mut elina_dimchange_t,
    ) -> *mut elina_dimchange2_t;
}
extern "C" {
    pub fn elina_dimchange2_clear(dimchange2: *mut elina_dimchange2_t);
}
extern "C" {
    pub fn elina_dimchange2_free(dimchange2: *mut elina_dimchange2_t);
}
extern "C" {
    pub fn elina_dimchange2_fprint(stream: *mut FILE, dimchange2: *mut elina_dimchange2_t);
}
extern "C" {
    pub fn elina_dimperm_init(dimperm: *mut elina_dimperm_t, size: size_t);
}
extern "C" {
    pub fn elina_dimperm_alloc(size: size_t) -> *mut elina_dimperm_t;
}
extern "C" {
    pub fn elina_dimperm_clear(dimperm: *mut elina_dimperm_t);
}
extern "C" {
    pub fn elina_dimperm_free(dimperm: *mut elina_dimperm_t);
}
extern "C" {
    pub fn elina_dimperm_fprint(stream: *mut FILE, perm: *mut elina_dimperm_t);
}
extern "C" {
    pub fn elina_dimperm_set_id(perm: *mut elina_dimperm_t);
}
extern "C" {
    pub fn elina_dimperm_compose(
        perm: *mut elina_dimperm_t,
        perm1: *mut elina_dimperm_t,
        perm2: *mut elina_dimperm_t,
    );
}
extern "C" {
    pub fn elina_dimperm_invert(nperm: *mut elina_dimperm_t, perm: *mut elina_dimperm_t);
}
pub const elina_linexpr_discr_t_ELINA_LINEXPR_DENSE: elina_linexpr_discr_t = 0;
pub const elina_linexpr_discr_t_ELINA_LINEXPR_SPARSE: elina_linexpr_discr_t = 1;
pub type elina_linexpr_discr_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct elina_linterm_t {
    pub dim: elina_dim_t,
    pub coeff: elina_coeff_t,
}
#[test]
fn bindgen_test_layout_elina_linterm_t() {
    assert_eq!(
        ::std::mem::size_of::<elina_linterm_t>(),
        24usize,
        concat!("Size of: ", stringify!(elina_linterm_t))
    );
    assert_eq!(
        ::std::mem::align_of::<elina_linterm_t>(),
        8usize,
        concat!("Alignment of ", stringify!(elina_linterm_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_linterm_t>())).dim as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_linterm_t),
            "::",
            stringify!(dim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_linterm_t>())).coeff as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_linterm_t),
            "::",
            stringify!(coeff)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct elina_linexpr0_t {
    pub cst: elina_coeff_t,
    pub discr: elina_linexpr_discr_t,
    pub size: size_t,
    pub p: elina_linexpr0_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union elina_linexpr0_t__bindgen_ty_1 {
    pub coeff: *mut elina_coeff_t,
    pub linterm: *mut elina_linterm_t,
}
#[test]
fn bindgen_test_layout_elina_linexpr0_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<elina_linexpr0_t__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(elina_linexpr0_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<elina_linexpr0_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(elina_linexpr0_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<elina_linexpr0_t__bindgen_ty_1>())).coeff as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_linexpr0_t__bindgen_ty_1),
            "::",
            stringify!(coeff)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<elina_linexpr0_t__bindgen_ty_1>())).linterm as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_linexpr0_t__bindgen_ty_1),
            "::",
            stringify!(linterm)
        )
    );
}
#[test]
fn bindgen_test_layout_elina_linexpr0_t() {
    assert_eq!(
        ::std::mem::size_of::<elina_linexpr0_t>(),
        40usize,
        concat!("Size of: ", stringify!(elina_linexpr0_t))
    );
    assert_eq!(
        ::std::mem::align_of::<elina_linexpr0_t>(),
        8usize,
        concat!("Alignment of ", stringify!(elina_linexpr0_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_linexpr0_t>())).cst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_linexpr0_t),
            "::",
            stringify!(cst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_linexpr0_t>())).discr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_linexpr0_t),
            "::",
            stringify!(discr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_linexpr0_t>())).size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_linexpr0_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_linexpr0_t>())).p as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_linexpr0_t),
            "::",
            stringify!(p)
        )
    );
}
pub const elina_linexpr_type_t_ELINA_LINEXPR_INTLINEAR: elina_linexpr_type_t = 0;
pub const elina_linexpr_type_t_ELINA_LINEXPR_QUASILINEAR: elina_linexpr_type_t = 1;
pub const elina_linexpr_type_t_ELINA_LINEXPR_LINEAR: elina_linexpr_type_t = 2;
pub type elina_linexpr_type_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn elina_linexpr0_alloc(
        lin_discr: elina_linexpr_discr_t,
        size: size_t,
    ) -> *mut elina_linexpr0_t;
}
extern "C" {
    pub fn elina_linexpr0_realloc(e: *mut elina_linexpr0_t, size: size_t);
}
extern "C" {
    pub fn elina_linexpr0_minimize(e: *mut elina_linexpr0_t);
}
extern "C" {
    pub fn elina_linexpr0_free(linexpr: *mut elina_linexpr0_t);
}
extern "C" {
    pub fn elina_linexpr0_copy(a: *mut elina_linexpr0_t) -> *mut elina_linexpr0_t;
}
extern "C" {
    pub fn elina_linexpr0_fprint(
        stream: *mut FILE,
        a: *mut elina_linexpr0_t,
        name_of_dim: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn elina_linexpr0_print(
        a: *mut elina_linexpr0_t,
        name_of_dim: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn elina_linexpr0_is_integer(a: *mut elina_linexpr0_t, intdim: size_t) -> bool_;
}
extern "C" {
    pub fn elina_linexpr0_is_real(a: *mut elina_linexpr0_t, intdim: size_t) -> bool_;
}
extern "C" {
    pub fn elina_linexpr0_type(a: *mut elina_linexpr0_t) -> elina_linexpr_type_t;
}
extern "C" {
    pub fn elina_linexpr0_is_linear(a: *mut elina_linexpr0_t) -> bool_;
}
extern "C" {
    pub fn elina_linexpr0_is_quasilinear(a: *mut elina_linexpr0_t) -> bool_;
}
extern "C" {
    pub fn elina_linexpr0_array_type(
        texpr: *mut *mut elina_linexpr0_t,
        size: size_t,
    ) -> elina_linexpr_type_t;
}
extern "C" {
    pub fn elina_linexpr0_array_is_linear(texpr: *mut *mut elina_linexpr0_t, size: size_t)
        -> bool_;
}
extern "C" {
    pub fn elina_linexpr0_array_is_quasilinear(
        texpr: *mut *mut elina_linexpr0_t,
        size: size_t,
    ) -> bool_;
}
extern "C" {
    pub fn elina_linexpr0_size(expr: *mut elina_linexpr0_t) -> size_t;
}
extern "C" {
    pub fn elina_linexpr0_cstref(expr: *mut elina_linexpr0_t) -> *mut elina_coeff_t;
}
extern "C" {
    pub fn elina_linexpr0_coeffref(
        expr: *mut elina_linexpr0_t,
        dim: elina_dim_t,
    ) -> *mut elina_coeff_t;
}
extern "C" {
    pub fn elina_linexpr0_get_cst(coeff: *mut elina_coeff_t, expr: *mut elina_linexpr0_t);
}
extern "C" {
    pub fn elina_linexpr0_get_coeff(
        coeff: *mut elina_coeff_t,
        expr: *mut elina_linexpr0_t,
        dim: elina_dim_t,
    ) -> bool_;
}
extern "C" {
    pub fn elina_linexpr0_set_cst(expr: *mut elina_linexpr0_t, cst: *mut elina_coeff_t);
}
extern "C" {
    pub fn elina_linexpr0_set_cst_scalar(expr: *mut elina_linexpr0_t, scalar: *mut elina_scalar_t);
}
extern "C" {
    pub fn elina_linexpr0_set_cst_scalar_int(
        expr: *mut elina_linexpr0_t,
        num: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn elina_linexpr0_set_cst_scalar_frac(
        expr: *mut elina_linexpr0_t,
        num: ::std::os::raw::c_long,
        den: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn elina_linexpr0_set_cst_scalar_double(expr: *mut elina_linexpr0_t, num: f64);
}
extern "C" {
    pub fn elina_linexpr0_set_cst_interval(expr: *mut elina_linexpr0_t, itv: *mut elina_interval_t);
}
extern "C" {
    pub fn elina_linexpr0_set_cst_interval_scalar(
        expr: *mut elina_linexpr0_t,
        inf: *mut elina_scalar_t,
        sup: *mut elina_scalar_t,
    );
}
extern "C" {
    pub fn elina_linexpr0_set_cst_interval_int(
        expr: *mut elina_linexpr0_t,
        inf: ::std::os::raw::c_int,
        sup: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn elina_linexpr0_set_cst_interval_frac(
        expr: *mut elina_linexpr0_t,
        numinf: ::std::os::raw::c_long,
        deninf: ::std::os::raw::c_ulong,
        numsup: ::std::os::raw::c_long,
        densup: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn elina_linexpr0_set_cst_interval_double(expr: *mut elina_linexpr0_t, inf: f64, sup: f64);
}
extern "C" {
    pub fn elina_linexpr0_set_coeff(
        expr: *mut elina_linexpr0_t,
        dim: elina_dim_t,
        coeff: *mut elina_coeff_t,
    ) -> bool_;
}
extern "C" {
    pub fn elina_linexpr0_set_coeff_scalar(
        expr: *mut elina_linexpr0_t,
        dim: elina_dim_t,
        scalar: *mut elina_scalar_t,
    ) -> bool_;
}
extern "C" {
    pub fn elina_linexpr0_set_coeff_scalar_int(
        expr: *mut elina_linexpr0_t,
        dim: elina_dim_t,
        num: ::std::os::raw::c_int,
    ) -> bool_;
}
extern "C" {
    pub fn elina_linexpr0_set_coeff_scalar_frac(
        expr: *mut elina_linexpr0_t,
        dim: elina_dim_t,
        num: ::std::os::raw::c_long,
        den: ::std::os::raw::c_ulong,
    ) -> bool_;
}
extern "C" {
    pub fn elina_linexpr0_set_coeff_scalar_double(
        expr: *mut elina_linexpr0_t,
        dim: elina_dim_t,
        num: f64,
    ) -> bool_;
}
extern "C" {
    pub fn elina_linexpr0_set_coeff_interval(
        expr: *mut elina_linexpr0_t,
        dim: elina_dim_t,
        itv: *mut elina_interval_t,
    ) -> bool_;
}
extern "C" {
    pub fn elina_linexpr0_set_coeff_interval_scalar(
        expr: *mut elina_linexpr0_t,
        dim: elina_dim_t,
        inf: *mut elina_scalar_t,
        sup: *mut elina_scalar_t,
    ) -> bool_;
}
extern "C" {
    pub fn elina_linexpr0_set_coeff_interval_int(
        expr: *mut elina_linexpr0_t,
        dim: elina_dim_t,
        inf: ::std::os::raw::c_int,
        sup: ::std::os::raw::c_int,
    ) -> bool_;
}
extern "C" {
    pub fn elina_linexpr0_set_coeff_interval_frac(
        expr: *mut elina_linexpr0_t,
        dim: elina_dim_t,
        numinf: ::std::os::raw::c_long,
        deninf: ::std::os::raw::c_ulong,
        numsup: ::std::os::raw::c_long,
        densup: ::std::os::raw::c_ulong,
    ) -> bool_;
}
extern "C" {
    pub fn elina_linexpr0_set_coeff_interval_double(
        expr: *mut elina_linexpr0_t,
        dim: elina_dim_t,
        inf: f64,
        sup: f64,
    ) -> bool_;
}
pub const elina_coefftag_t_ELINA_COEFF: elina_coefftag_t = 0;
pub const elina_coefftag_t_ELINA_COEFF_S: elina_coefftag_t = 1;
pub const elina_coefftag_t_ELINA_COEFF_S_MPQ: elina_coefftag_t = 2;
pub const elina_coefftag_t_ELINA_COEFF_S_MPFR: elina_coefftag_t = 3;
pub const elina_coefftag_t_ELINA_COEFF_S_INT: elina_coefftag_t = 4;
pub const elina_coefftag_t_ELINA_COEFF_S_FRAC: elina_coefftag_t = 5;
pub const elina_coefftag_t_ELINA_COEFF_S_DOUBLE: elina_coefftag_t = 6;
pub const elina_coefftag_t_ELINA_COEFF_I: elina_coefftag_t = 7;
pub const elina_coefftag_t_ELINA_COEFF_I_SCALAR: elina_coefftag_t = 8;
pub const elina_coefftag_t_ELINA_COEFF_I_MPQ: elina_coefftag_t = 9;
pub const elina_coefftag_t_ELINA_COEFF_I_MPFR: elina_coefftag_t = 10;
pub const elina_coefftag_t_ELINA_COEFF_I_INT: elina_coefftag_t = 11;
pub const elina_coefftag_t_ELINA_COEFF_I_FRAC: elina_coefftag_t = 12;
pub const elina_coefftag_t_ELINA_COEFF_I_DOUBLE: elina_coefftag_t = 13;
pub const elina_coefftag_t_ELINA_CST: elina_coefftag_t = 14;
pub const elina_coefftag_t_ELINA_CST_S: elina_coefftag_t = 15;
pub const elina_coefftag_t_ELINA_CST_S_MPQ: elina_coefftag_t = 16;
pub const elina_coefftag_t_ELINA_CST_S_MPFR: elina_coefftag_t = 17;
pub const elina_coefftag_t_ELINA_CST_S_INT: elina_coefftag_t = 18;
pub const elina_coefftag_t_ELINA_CST_S_FRAC: elina_coefftag_t = 19;
pub const elina_coefftag_t_ELINA_CST_S_DOUBLE: elina_coefftag_t = 20;
pub const elina_coefftag_t_ELINA_CST_I: elina_coefftag_t = 21;
pub const elina_coefftag_t_ELINA_CST_I_SCALAR: elina_coefftag_t = 22;
pub const elina_coefftag_t_ELINA_CST_I_MPQ: elina_coefftag_t = 23;
pub const elina_coefftag_t_ELINA_CST_I_MPFR: elina_coefftag_t = 24;
pub const elina_coefftag_t_ELINA_CST_I_INT: elina_coefftag_t = 25;
pub const elina_coefftag_t_ELINA_CST_I_FRAC: elina_coefftag_t = 26;
pub const elina_coefftag_t_ELINA_CST_I_DOUBLE: elina_coefftag_t = 27;
pub const elina_coefftag_t_ELINA_END: elina_coefftag_t = 28;
pub type elina_coefftag_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn elina_linexpr0_set_list_generic(
        get_pcoeff: ::std::option::Option<
            unsafe extern "C" fn(
                expr: *mut ::std::os::raw::c_void,
                cst: bool_,
                va: *mut va_list,
            ) -> *mut elina_coeff_t,
        >,
        expr: *mut ::std::os::raw::c_void,
        va: *mut va_list,
    ) -> bool_;
}
extern "C" {
    pub fn elina_linexpr0_set_list(expr: *mut elina_linexpr0_t, ...) -> bool_;
}
extern "C" {
    pub fn elina_linexpr0_add_dimensions_with(
        expr: *mut elina_linexpr0_t,
        dimchange: *mut elina_dimchange_t,
    );
}
extern "C" {
    pub fn elina_linexpr0_add_dimensions(
        expr: *mut elina_linexpr0_t,
        dimchange: *mut elina_dimchange_t,
    ) -> *mut elina_linexpr0_t;
}
extern "C" {
    pub fn elina_linexpr0_permute_dimensions_with(
        expr: *mut elina_linexpr0_t,
        perm: *mut elina_dimperm_t,
    );
}
extern "C" {
    pub fn elina_linexpr0_permute_dimensions(
        expr: *mut elina_linexpr0_t,
        perm: *mut elina_dimperm_t,
    ) -> *mut elina_linexpr0_t;
}
extern "C" {
    pub fn elina_linexpr0_hash(expr: *mut elina_linexpr0_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn elina_linexpr0_equal(
        expr1: *mut elina_linexpr0_t,
        expr2: *mut elina_linexpr0_t,
    ) -> bool_;
}
extern "C" {
    pub fn elina_linexpr0_compare(
        expr1: *mut elina_linexpr0_t,
        expr2: *mut elina_linexpr0_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn elina_linexpr0_array_alloc(size: size_t) -> *mut *mut elina_linexpr0_t;
}
extern "C" {
    pub fn elina_linexpr0_array_free(texpr: *mut *mut elina_linexpr0_t, size: size_t);
}
pub const elina_texpr_op_t_ELINA_TEXPR_ADD: elina_texpr_op_t = 0;
pub const elina_texpr_op_t_ELINA_TEXPR_SUB: elina_texpr_op_t = 1;
pub const elina_texpr_op_t_ELINA_TEXPR_MUL: elina_texpr_op_t = 2;
pub const elina_texpr_op_t_ELINA_TEXPR_DIV: elina_texpr_op_t = 3;
pub const elina_texpr_op_t_ELINA_TEXPR_MOD: elina_texpr_op_t = 4;
pub const elina_texpr_op_t_ELINA_TEXPR_POW: elina_texpr_op_t = 5;
pub const elina_texpr_op_t_ELINA_TEXPR_NEG: elina_texpr_op_t = 6;
pub const elina_texpr_op_t_ELINA_TEXPR_CAST: elina_texpr_op_t = 7;
pub const elina_texpr_op_t_ELINA_TEXPR_SQRT: elina_texpr_op_t = 8;
pub type elina_texpr_op_t = ::std::os::raw::c_uint;
pub const elina_texpr_rtype_t_ELINA_RTYPE_REAL: elina_texpr_rtype_t = 0;
pub const elina_texpr_rtype_t_ELINA_RTYPE_INT: elina_texpr_rtype_t = 1;
pub const elina_texpr_rtype_t_ELINA_RTYPE_SINGLE: elina_texpr_rtype_t = 2;
pub const elina_texpr_rtype_t_ELINA_RTYPE_DOUBLE: elina_texpr_rtype_t = 3;
pub const elina_texpr_rtype_t_ELINA_RTYPE_EXTENDED: elina_texpr_rtype_t = 4;
pub const elina_texpr_rtype_t_ELINA_RTYPE_QUAD: elina_texpr_rtype_t = 5;
pub const elina_texpr_rtype_t_ELINA_RTYPE_SIZE: elina_texpr_rtype_t = 6;
pub type elina_texpr_rtype_t = ::std::os::raw::c_uint;
pub const elina_texpr_rdir_t_ELINA_RDIR_NEAREST: elina_texpr_rdir_t = 0;
pub const elina_texpr_rdir_t_ELINA_RDIR_ZERO: elina_texpr_rdir_t = 1;
pub const elina_texpr_rdir_t_ELINA_RDIR_UP: elina_texpr_rdir_t = 2;
pub const elina_texpr_rdir_t_ELINA_RDIR_DOWN: elina_texpr_rdir_t = 3;
pub const elina_texpr_rdir_t_ELINA_RDIR_RND: elina_texpr_rdir_t = 4;
pub const elina_texpr_rdir_t_ELINA_RDIR_SIZE: elina_texpr_rdir_t = 5;
pub type elina_texpr_rdir_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elina_texpr0_node_t {
    pub op: elina_texpr_op_t,
    pub type_: elina_texpr_rtype_t,
    pub dir: elina_texpr_rdir_t,
    pub exprA: *mut elina_texpr0_t,
    pub exprB: *mut elina_texpr0_t,
}
#[test]
fn bindgen_test_layout_elina_texpr0_node_t() {
    assert_eq!(
        ::std::mem::size_of::<elina_texpr0_node_t>(),
        32usize,
        concat!("Size of: ", stringify!(elina_texpr0_node_t))
    );
    assert_eq!(
        ::std::mem::align_of::<elina_texpr0_node_t>(),
        8usize,
        concat!("Alignment of ", stringify!(elina_texpr0_node_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_texpr0_node_t>())).op as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_texpr0_node_t),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_texpr0_node_t>())).type_ as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_texpr0_node_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_texpr0_node_t>())).dir as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_texpr0_node_t),
            "::",
            stringify!(dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_texpr0_node_t>())).exprA as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_texpr0_node_t),
            "::",
            stringify!(exprA)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_texpr0_node_t>())).exprB as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_texpr0_node_t),
            "::",
            stringify!(exprB)
        )
    );
}
pub const elina_texpr_discr_t_ELINA_TEXPR_CST: elina_texpr_discr_t = 0;
pub const elina_texpr_discr_t_ELINA_TEXPR_DIM: elina_texpr_discr_t = 1;
pub const elina_texpr_discr_t_ELINA_TEXPR_NODE: elina_texpr_discr_t = 2;
pub type elina_texpr_discr_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct elina_texpr0_t {
    pub discr: elina_texpr_discr_t,
    pub val: elina_texpr0_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union elina_texpr0_t__bindgen_ty_1 {
    pub cst: elina_coeff_t,
    pub dim: elina_dim_t,
    pub node: *mut elina_texpr0_node_t,
}
#[test]
fn bindgen_test_layout_elina_texpr0_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<elina_texpr0_t__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(elina_texpr0_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<elina_texpr0_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(elina_texpr0_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<elina_texpr0_t__bindgen_ty_1>())).cst as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_texpr0_t__bindgen_ty_1),
            "::",
            stringify!(cst)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<elina_texpr0_t__bindgen_ty_1>())).dim as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_texpr0_t__bindgen_ty_1),
            "::",
            stringify!(dim)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<elina_texpr0_t__bindgen_ty_1>())).node as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_texpr0_t__bindgen_ty_1),
            "::",
            stringify!(node)
        )
    );
}
#[test]
fn bindgen_test_layout_elina_texpr0_t() {
    assert_eq!(
        ::std::mem::size_of::<elina_texpr0_t>(),
        24usize,
        concat!("Size of: ", stringify!(elina_texpr0_t))
    );
    assert_eq!(
        ::std::mem::align_of::<elina_texpr0_t>(),
        8usize,
        concat!("Alignment of ", stringify!(elina_texpr0_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_texpr0_t>())).discr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_texpr0_t),
            "::",
            stringify!(discr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_texpr0_t>())).val as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_texpr0_t),
            "::",
            stringify!(val)
        )
    );
}
extern "C" {
    pub fn elina_texpr0_cst(coeff: *mut elina_coeff_t) -> *mut elina_texpr0_t;
}
extern "C" {
    pub fn elina_texpr0_cst_scalar(scalar: *mut elina_scalar_t) -> *mut elina_texpr0_t;
}
extern "C" {
    pub fn elina_texpr0_cst_scalar_mpq(mpq: *mut __mpq_struct) -> *mut elina_texpr0_t;
}
extern "C" {
    pub fn elina_texpr0_cst_scalar_mpfr(mpfr: *mut __mpfr_struct) -> *mut elina_texpr0_t;
}
extern "C" {
    pub fn elina_texpr0_cst_scalar_int(num: ::std::os::raw::c_long) -> *mut elina_texpr0_t;
}
extern "C" {
    pub fn elina_texpr0_cst_scalar_frac(
        num: ::std::os::raw::c_long,
        den: ::std::os::raw::c_ulong,
    ) -> *mut elina_texpr0_t;
}
extern "C" {
    pub fn elina_texpr0_cst_scalar_double(num: f64) -> *mut elina_texpr0_t;
}
extern "C" {
    pub fn elina_texpr0_cst_interval(itv: *mut elina_interval_t) -> *mut elina_texpr0_t;
}
extern "C" {
    pub fn elina_texpr0_cst_interval_scalar(
        inf: *mut elina_scalar_t,
        sup: *mut elina_scalar_t,
    ) -> *mut elina_texpr0_t;
}
extern "C" {
    pub fn elina_texpr0_cst_interval_mpq(
        inf: *mut __mpq_struct,
        sup: *mut __mpq_struct,
    ) -> *mut elina_texpr0_t;
}
extern "C" {
    pub fn elina_texpr0_cst_interval_mpfr(
        inf: *mut __mpfr_struct,
        sup: *mut __mpfr_struct,
    ) -> *mut elina_texpr0_t;
}
extern "C" {
    pub fn elina_texpr0_cst_interval_int(
        inf: ::std::os::raw::c_long,
        sup: ::std::os::raw::c_long,
    ) -> *mut elina_texpr0_t;
}
extern "C" {
    pub fn elina_texpr0_cst_interval_frac(
        numinf: ::std::os::raw::c_long,
        deninf: ::std::os::raw::c_ulong,
        numsup: ::std::os::raw::c_long,
        densup: ::std::os::raw::c_ulong,
    ) -> *mut elina_texpr0_t;
}
extern "C" {
    pub fn elina_texpr0_cst_interval_double(inf: f64, sup: f64) -> *mut elina_texpr0_t;
}
extern "C" {
    pub fn elina_texpr0_cst_interval_top() -> *mut elina_texpr0_t;
}
extern "C" {
    pub fn elina_texpr0_dim(dim: elina_dim_t) -> *mut elina_texpr0_t;
}
extern "C" {
    pub fn elina_texpr0_unop(
        op: elina_texpr_op_t,
        opA: *mut elina_texpr0_t,
        type_: elina_texpr_rtype_t,
        dir: elina_texpr_rdir_t,
    ) -> *mut elina_texpr0_t;
}
extern "C" {
    pub fn elina_texpr0_binop(
        op: elina_texpr_op_t,
        opA: *mut elina_texpr0_t,
        opB: *mut elina_texpr0_t,
        type_: elina_texpr_rtype_t,
        dir: elina_texpr_rdir_t,
    ) -> *mut elina_texpr0_t;
}
extern "C" {
    pub fn elina_texpr0_copy(expr: *mut elina_texpr0_t) -> *mut elina_texpr0_t;
}
extern "C" {
    pub fn elina_texpr0_free(expr: *mut elina_texpr0_t);
}
extern "C" {
    pub fn elina_texpr0_from_linexpr0(e: *mut elina_linexpr0_t) -> *mut elina_texpr0_t;
}
extern "C" {
    pub fn elina_texpr0_fprint(
        stream: *mut FILE,
        a: *mut elina_texpr0_t,
        name_of_dim: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn elina_texpr0_print(
        a: *mut elina_texpr0_t,
        name_of_dim: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn elina_texpr0_depth(a: *mut elina_texpr0_t) -> size_t;
}
extern "C" {
    pub fn elina_texpr0_size(a: *mut elina_texpr0_t) -> size_t;
}
extern "C" {
    pub fn elina_texpr0_max_dim(a: *mut elina_texpr0_t) -> elina_dim_t;
}
extern "C" {
    pub fn elina_texpr0_has_dim(a: *mut elina_texpr0_t, d: elina_dim_t) -> bool_;
}
extern "C" {
    pub fn elina_texpr0_dimlist(a: *mut elina_texpr0_t) -> *mut elina_dim_t;
}
extern "C" {
    pub fn elina_texpr0_is_interval_cst(a: *mut elina_texpr0_t) -> bool_;
}
extern "C" {
    pub fn elina_texpr0_is_interval_linear(a: *mut elina_texpr0_t) -> bool_;
}
extern "C" {
    pub fn elina_texpr0_is_interval_polynomial(a: *mut elina_texpr0_t) -> bool_;
}
extern "C" {
    pub fn elina_texpr0_is_interval_polyfrac(a: *mut elina_texpr0_t) -> bool_;
}
extern "C" {
    pub fn elina_texpr0_is_scalar(a: *mut elina_texpr0_t) -> bool_;
}
extern "C" {
    pub fn elina_texpr0_array_is_interval_linear(
        texpr: *mut *mut elina_texpr0_t,
        size: size_t,
    ) -> bool_;
}
extern "C" {
    pub fn elina_texpr0_array_is_interval_polynomial(
        texpr: *mut *mut elina_texpr0_t,
        size: size_t,
    ) -> bool_;
}
extern "C" {
    pub fn elina_texpr0_array_is_interval_polyfrac(
        texpr: *mut *mut elina_texpr0_t,
        size: size_t,
    ) -> bool_;
}
extern "C" {
    pub fn elina_texpr0_array_is_scalar(texpr: *mut *mut elina_texpr0_t, size: size_t) -> bool_;
}
extern "C" {
    pub fn elina_texpr0_substitute(
        a: *mut elina_texpr0_t,
        dim: elina_dim_t,
        dst: *mut elina_texpr0_t,
    ) -> *mut elina_texpr0_t;
}
extern "C" {
    pub fn elina_texpr0_substitute_with(
        a: *mut elina_texpr0_t,
        dim: elina_dim_t,
        dst: *mut elina_texpr0_t,
    );
}
extern "C" {
    pub fn elina_texpr0_add_dimensions(
        expr: *mut elina_texpr0_t,
        dimchange: *mut elina_dimchange_t,
    ) -> *mut elina_texpr0_t;
}
extern "C" {
    pub fn elina_texpr0_remove_dimensions(
        expr: *mut elina_texpr0_t,
        dimchange: *mut elina_dimchange_t,
    ) -> *mut elina_texpr0_t;
}
extern "C" {
    pub fn elina_texpr0_permute_dimensions(
        expr: *mut elina_texpr0_t,
        dimperm: *mut elina_dimperm_t,
    ) -> *mut elina_texpr0_t;
}
extern "C" {
    pub fn elina_texpr0_add_dimensions_with(
        expr: *mut elina_texpr0_t,
        dimchange: *mut elina_dimchange_t,
    );
}
extern "C" {
    pub fn elina_texpr0_remove_dimensions_with(
        expr: *mut elina_texpr0_t,
        dimchange: *mut elina_dimchange_t,
    );
}
extern "C" {
    pub fn elina_texpr0_permute_dimensions_with(
        expr: *mut elina_texpr0_t,
        perm: *mut elina_dimperm_t,
    );
}
extern "C" {
    pub fn elina_texpr0_hash(a: *mut elina_texpr0_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn elina_texpr0_equal(a1: *mut elina_texpr0_t, a2: *mut elina_texpr0_t) -> bool_;
}
extern "C" {
    pub fn elina_texpr0_node(
        op: elina_texpr_op_t,
        type_: elina_texpr_rtype_t,
        dir: elina_texpr_rdir_t,
        opA: *mut elina_texpr0_t,
        opB: *mut elina_texpr0_t,
    ) -> *mut elina_texpr0_t;
}
extern "C" {
    pub fn elina_texpr0_node_free(node: *mut elina_texpr0_node_t);
}
extern "C" {
    pub fn elina_texpr0_clear(node: *mut elina_texpr0_t);
}
pub const elina_constyp_t_ELINA_CONS_EQ: elina_constyp_t = 0;
pub const elina_constyp_t_ELINA_CONS_SUPEQ: elina_constyp_t = 1;
pub const elina_constyp_t_ELINA_CONS_SUP: elina_constyp_t = 2;
pub const elina_constyp_t_ELINA_CONS_EQMOD: elina_constyp_t = 3;
pub const elina_constyp_t_ELINA_CONS_DISEQ: elina_constyp_t = 4;
pub type elina_constyp_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elina_lincons0_t {
    pub linexpr0: *mut elina_linexpr0_t,
    pub constyp: elina_constyp_t,
    pub scalar: *mut elina_scalar_t,
}
#[test]
fn bindgen_test_layout_elina_lincons0_t() {
    assert_eq!(
        ::std::mem::size_of::<elina_lincons0_t>(),
        24usize,
        concat!("Size of: ", stringify!(elina_lincons0_t))
    );
    assert_eq!(
        ::std::mem::align_of::<elina_lincons0_t>(),
        8usize,
        concat!("Alignment of ", stringify!(elina_lincons0_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_lincons0_t>())).linexpr0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_lincons0_t),
            "::",
            stringify!(linexpr0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_lincons0_t>())).constyp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_lincons0_t),
            "::",
            stringify!(constyp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_lincons0_t>())).scalar as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_lincons0_t),
            "::",
            stringify!(scalar)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elina_lincons0_array_t {
    pub p: *mut elina_lincons0_t,
    pub size: size_t,
}
#[test]
fn bindgen_test_layout_elina_lincons0_array_t() {
    assert_eq!(
        ::std::mem::size_of::<elina_lincons0_array_t>(),
        16usize,
        concat!("Size of: ", stringify!(elina_lincons0_array_t))
    );
    assert_eq!(
        ::std::mem::align_of::<elina_lincons0_array_t>(),
        8usize,
        concat!("Alignment of ", stringify!(elina_lincons0_array_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_lincons0_array_t>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_lincons0_array_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_lincons0_array_t>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_lincons0_array_t),
            "::",
            stringify!(size)
        )
    );
}
extern "C" {
    pub fn elina_lincons0_make(
        constyp: elina_constyp_t,
        linexpr: *mut elina_linexpr0_t,
        scalar: *mut elina_scalar_t,
    ) -> elina_lincons0_t;
}
extern "C" {
    pub fn elina_lincons0_make_unsat() -> elina_lincons0_t;
}
extern "C" {
    pub fn elina_lincons0_copy(cons: *mut elina_lincons0_t) -> elina_lincons0_t;
}
extern "C" {
    pub fn elina_lincons0_clear(cons: *mut elina_lincons0_t);
}
extern "C" {
    pub fn elina_lincons0_print(
        cons: *mut elina_lincons0_t,
        name_of_dim: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn elina_lincons0_fprint(
        stream: *mut FILE,
        cons: *mut elina_lincons0_t,
        name_of_dim: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn elina_lincons0_is_unsat(cons: *mut elina_lincons0_t) -> bool_;
}
extern "C" {
    pub fn elina_lincons0_is_sat(cons: *mut elina_lincons0_t) -> bool_;
}
extern "C" {
    pub fn elina_lincons0_add_dimensions_with(
        cons: *mut elina_lincons0_t,
        dimchange: *mut elina_dimchange_t,
    );
}
extern "C" {
    pub fn elina_lincons0_add_dimensions(
        cons: *mut elina_lincons0_t,
        dimchange: *mut elina_dimchange_t,
    ) -> elina_lincons0_t;
}
extern "C" {
    pub fn elina_lincons0_permute_dimensions_with(
        cons: *mut elina_lincons0_t,
        perm: *mut elina_dimperm_t,
    );
}
extern "C" {
    pub fn elina_lincons0_permute_dimensions(
        cons: *mut elina_lincons0_t,
        perm: *mut elina_dimperm_t,
    ) -> elina_lincons0_t;
}
extern "C" {
    pub fn elina_lincons0_array_make(size: size_t) -> elina_lincons0_array_t;
}
extern "C" {
    pub fn elina_lincons0_array_resize(array: *mut elina_lincons0_array_t, size: size_t);
}
extern "C" {
    pub fn elina_lincons0_array_clear(array: *mut elina_lincons0_array_t);
}
extern "C" {
    pub fn elina_lincons0_array_print(
        elina_lincons0_array: *mut elina_lincons0_array_t,
        name_of_dim: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn elina_lincons0_array_fprint(
        stream: *mut FILE,
        elina_lincons0_array: *mut elina_lincons0_array_t,
        name_of_dim: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn elina_lincons0_array_type(array: *mut elina_lincons0_array_t) -> elina_linexpr_type_t;
}
extern "C" {
    pub fn elina_lincons0_array_is_linear(array: *mut elina_lincons0_array_t) -> bool_;
}
extern "C" {
    pub fn elina_lincons0_array_is_quasilinear(array: *mut elina_lincons0_array_t) -> bool_;
}
extern "C" {
    pub fn elina_lincons0_array_add_dimensions_with(
        array: *mut elina_lincons0_array_t,
        dimchange: *mut elina_dimchange_t,
    );
}
extern "C" {
    pub fn elina_lincons0_array_add_dimensions(
        array: *mut elina_lincons0_array_t,
        dimchange: *mut elina_dimchange_t,
    ) -> elina_lincons0_array_t;
}
extern "C" {
    pub fn elina_lincons0_array_permute_dimensions_with(
        array: *mut elina_lincons0_array_t,
        perm: *mut elina_dimperm_t,
    );
}
extern "C" {
    pub fn elina_lincons0_array_permute_dimensions(
        array: *mut elina_lincons0_array_t,
        perm: *mut elina_dimperm_t,
    ) -> elina_lincons0_array_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elina_tcons0_t {
    pub texpr0: *mut elina_texpr0_t,
    pub constyp: elina_constyp_t,
    pub scalar: *mut elina_scalar_t,
}
#[test]
fn bindgen_test_layout_elina_tcons0_t() {
    assert_eq!(
        ::std::mem::size_of::<elina_tcons0_t>(),
        24usize,
        concat!("Size of: ", stringify!(elina_tcons0_t))
    );
    assert_eq!(
        ::std::mem::align_of::<elina_tcons0_t>(),
        8usize,
        concat!("Alignment of ", stringify!(elina_tcons0_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_tcons0_t>())).texpr0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_tcons0_t),
            "::",
            stringify!(texpr0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_tcons0_t>())).constyp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_tcons0_t),
            "::",
            stringify!(constyp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_tcons0_t>())).scalar as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_tcons0_t),
            "::",
            stringify!(scalar)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elina_tcons0_array_t {
    pub p: *mut elina_tcons0_t,
    pub size: size_t,
}
#[test]
fn bindgen_test_layout_elina_tcons0_array_t() {
    assert_eq!(
        ::std::mem::size_of::<elina_tcons0_array_t>(),
        16usize,
        concat!("Size of: ", stringify!(elina_tcons0_array_t))
    );
    assert_eq!(
        ::std::mem::align_of::<elina_tcons0_array_t>(),
        8usize,
        concat!("Alignment of ", stringify!(elina_tcons0_array_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_tcons0_array_t>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_tcons0_array_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_tcons0_array_t>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_tcons0_array_t),
            "::",
            stringify!(size)
        )
    );
}
extern "C" {
    pub fn elina_tcons0_make_unsat() -> elina_tcons0_t;
}
extern "C" {
    pub fn elina_tcons0_fprint(
        stream: *mut FILE,
        cons: *mut elina_tcons0_t,
        name_of_dim: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn elina_tcons0_array_make(size: size_t) -> elina_tcons0_array_t;
}
extern "C" {
    pub fn elina_tcons0_array_resize(array: *mut elina_tcons0_array_t, size: size_t);
}
extern "C" {
    pub fn elina_tcons0_array_clear(array: *mut elina_tcons0_array_t);
}
extern "C" {
    pub fn elina_tcons0_array_fprint(
        stream: *mut FILE,
        elina_tcons0_array: *mut elina_tcons0_array_t,
        name_of_dim: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn elina_tcons0_array_is_interval_linear(array: *mut elina_tcons0_array_t) -> bool_;
}
extern "C" {
    pub fn elina_tcons0_array_add_dimensions_with(
        array: *mut elina_tcons0_array_t,
        dimchange: *mut elina_dimchange_t,
    );
}
extern "C" {
    pub fn elina_tcons0_array_add_dimensions(
        array: *mut elina_tcons0_array_t,
        dimchange: *mut elina_dimchange_t,
    ) -> elina_tcons0_array_t;
}
extern "C" {
    pub fn elina_tcons0_array_remove_dimensions_with(
        array: *mut elina_tcons0_array_t,
        dimchange: *mut elina_dimchange_t,
    );
}
extern "C" {
    pub fn elina_tcons0_array_remove_dimensions(
        array: *mut elina_tcons0_array_t,
        dimchange: *mut elina_dimchange_t,
    ) -> elina_tcons0_array_t;
}
extern "C" {
    pub fn elina_tcons0_array_permute_dimensions_with(
        array: *mut elina_tcons0_array_t,
        perm: *mut elina_dimperm_t,
    );
}
extern "C" {
    pub fn elina_tcons0_array_permute_dimensions(
        array: *mut elina_tcons0_array_t,
        perm: *mut elina_dimperm_t,
    ) -> elina_tcons0_array_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elina_membuf_t {
    pub ptr: *mut ::std::os::raw::c_void,
    pub size: size_t,
}
#[test]
fn bindgen_test_layout_elina_membuf_t() {
    assert_eq!(
        ::std::mem::size_of::<elina_membuf_t>(),
        16usize,
        concat!("Size of: ", stringify!(elina_membuf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<elina_membuf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(elina_membuf_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_membuf_t>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_membuf_t),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_membuf_t>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_membuf_t),
            "::",
            stringify!(size)
        )
    );
}
pub const elina_funid_t_ELINA_FUNID_UNKNOWN: elina_funid_t = 0;
pub const elina_funid_t_ELINA_FUNID_COPY: elina_funid_t = 1;
pub const elina_funid_t_ELINA_FUNID_FREE: elina_funid_t = 2;
pub const elina_funid_t_ELINA_FUNID_ASIZE: elina_funid_t = 3;
pub const elina_funid_t_ELINA_FUNID_MINIMIZE: elina_funid_t = 4;
pub const elina_funid_t_ELINA_FUNID_CANONICALIZE: elina_funid_t = 5;
pub const elina_funid_t_ELINA_FUNID_HASH: elina_funid_t = 6;
pub const elina_funid_t_ELINA_FUNID_APPROXIMATE: elina_funid_t = 7;
pub const elina_funid_t_ELINA_FUNID_FPRINT: elina_funid_t = 8;
pub const elina_funid_t_ELINA_FUNID_FPRINTDIFF: elina_funid_t = 9;
pub const elina_funid_t_ELINA_FUNID_FDUMP: elina_funid_t = 10;
pub const elina_funid_t_ELINA_FUNID_SERIALIZE_RAW: elina_funid_t = 11;
pub const elina_funid_t_ELINA_FUNID_DESERIALIZE_RAW: elina_funid_t = 12;
pub const elina_funid_t_ELINA_FUNID_BOTTOM: elina_funid_t = 13;
pub const elina_funid_t_ELINA_FUNID_TOP: elina_funid_t = 14;
pub const elina_funid_t_ELINA_FUNID_OF_BOX: elina_funid_t = 15;
pub const elina_funid_t_ELINA_FUNID_DIMENSION: elina_funid_t = 16;
pub const elina_funid_t_ELINA_FUNID_IS_BOTTOM: elina_funid_t = 17;
pub const elina_funid_t_ELINA_FUNID_IS_TOP: elina_funid_t = 18;
pub const elina_funid_t_ELINA_FUNID_IS_LEQ: elina_funid_t = 19;
pub const elina_funid_t_ELINA_FUNID_IS_EQ: elina_funid_t = 20;
pub const elina_funid_t_ELINA_FUNID_IS_DIMENSION_UNCONSTRAINED: elina_funid_t = 21;
pub const elina_funid_t_ELINA_FUNID_SAT_INTERVAL: elina_funid_t = 22;
pub const elina_funid_t_ELINA_FUNID_SAT_LINCONS: elina_funid_t = 23;
pub const elina_funid_t_ELINA_FUNID_SAT_TCONS: elina_funid_t = 24;
pub const elina_funid_t_ELINA_FUNID_BOUND_DIMENSION: elina_funid_t = 25;
pub const elina_funid_t_ELINA_FUNID_BOUND_LINEXPR: elina_funid_t = 26;
pub const elina_funid_t_ELINA_FUNID_BOUND_TEXPR: elina_funid_t = 27;
pub const elina_funid_t_ELINA_FUNID_TO_BOX: elina_funid_t = 28;
pub const elina_funid_t_ELINA_FUNID_TO_LINCONS_ARRAY: elina_funid_t = 29;
pub const elina_funid_t_ELINA_FUNID_TO_TCONS_ARRAY: elina_funid_t = 30;
pub const elina_funid_t_ELINA_FUNID_TO_GENERATOR_ARRAY: elina_funid_t = 31;
pub const elina_funid_t_ELINA_FUNID_MEET: elina_funid_t = 32;
pub const elina_funid_t_ELINA_FUNID_MEET_ARRAY: elina_funid_t = 33;
pub const elina_funid_t_ELINA_FUNID_MEET_LINCONS_ARRAY: elina_funid_t = 34;
pub const elina_funid_t_ELINA_FUNID_MEET_TCONS_ARRAY: elina_funid_t = 35;
pub const elina_funid_t_ELINA_FUNID_JOIN: elina_funid_t = 36;
pub const elina_funid_t_ELINA_FUNID_JOIN_ARRAY: elina_funid_t = 37;
pub const elina_funid_t_ELINA_FUNID_ADD_RAY_ARRAY: elina_funid_t = 38;
pub const elina_funid_t_ELINA_FUNID_ASSIGN_LINEXPR_ARRAY: elina_funid_t = 39;
pub const elina_funid_t_ELINA_FUNID_SUBSTITUTE_LINEXPR_ARRAY: elina_funid_t = 40;
pub const elina_funid_t_ELINA_FUNID_ASSIGN_TEXPR_ARRAY: elina_funid_t = 41;
pub const elina_funid_t_ELINA_FUNID_SUBSTITUTE_TEXPR_ARRAY: elina_funid_t = 42;
pub const elina_funid_t_ELINA_FUNID_ADD_DIMENSIONS: elina_funid_t = 43;
pub const elina_funid_t_ELINA_FUNID_REMOVE_DIMENSIONS: elina_funid_t = 44;
pub const elina_funid_t_ELINA_FUNID_PERMUTE_DIMENSIONS: elina_funid_t = 45;
pub const elina_funid_t_ELINA_FUNID_FORGET_ARRAY: elina_funid_t = 46;
pub const elina_funid_t_ELINA_FUNID_EXPAND: elina_funid_t = 47;
pub const elina_funid_t_ELINA_FUNID_FOLD: elina_funid_t = 48;
pub const elina_funid_t_ELINA_FUNID_WIDENING: elina_funid_t = 49;
pub const elina_funid_t_ELINA_FUNID_CLOSURE: elina_funid_t = 50;
pub const elina_funid_t_ELINA_FUNID_SIZE: elina_funid_t = 51;
pub const elina_funid_t_ELINA_FUNID_CHANGE_ENVIRONMENT: elina_funid_t = 52;
pub const elina_funid_t_ELINA_FUNID_RENAME_ARRAY: elina_funid_t = 53;
pub const elina_funid_t_ELINA_FUNID_SIZE2: elina_funid_t = 54;
pub type elina_funid_t = ::std::os::raw::c_uint;
extern "C" {
    pub static mut elina_name_of_funid: [*const ::std::os::raw::c_char; 54usize];
}
pub const elina_exc_t_ELINA_EXC_NONE: elina_exc_t = 0;
pub const elina_exc_t_ELINA_EXC_TIMEOUT: elina_exc_t = 1;
pub const elina_exc_t_ELINA_EXC_OUT_OF_SPACE: elina_exc_t = 2;
pub const elina_exc_t_ELINA_EXC_OVERFLOW: elina_exc_t = 3;
pub const elina_exc_t_ELINA_EXC_INVALID_ARGUMENT: elina_exc_t = 4;
pub const elina_exc_t_ELINA_EXC_NOT_IMPLEMENTED: elina_exc_t = 5;
pub const elina_exc_t_ELINA_EXC_SIZE: elina_exc_t = 6;
pub type elina_exc_t = ::std::os::raw::c_uint;
extern "C" {
    pub static mut elina_name_of_exception: [*const ::std::os::raw::c_char; 6usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elina_exclog_t {
    pub exn: elina_exc_t,
    pub funid: elina_funid_t,
    pub msg: *mut ::std::os::raw::c_char,
    pub tail: *mut elina_exclog_t,
}
#[test]
fn bindgen_test_layout_elina_exclog_t() {
    assert_eq!(
        ::std::mem::size_of::<elina_exclog_t>(),
        24usize,
        concat!("Size of: ", stringify!(elina_exclog_t))
    );
    assert_eq!(
        ::std::mem::align_of::<elina_exclog_t>(),
        8usize,
        concat!("Alignment of ", stringify!(elina_exclog_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_exclog_t>())).exn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_exclog_t),
            "::",
            stringify!(exn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_exclog_t>())).funid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_exclog_t),
            "::",
            stringify!(funid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_exclog_t>())).msg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_exclog_t),
            "::",
            stringify!(msg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_exclog_t>())).tail as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_exclog_t),
            "::",
            stringify!(tail)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elina_result_t {
    pub exclog: *mut elina_exclog_t,
    pub exn: elina_exc_t,
    pub flag_exact: bool_,
    pub flag_best: bool_,
}
#[test]
fn bindgen_test_layout_elina_result_t() {
    assert_eq!(
        ::std::mem::size_of::<elina_result_t>(),
        16usize,
        concat!("Size of: ", stringify!(elina_result_t))
    );
    assert_eq!(
        ::std::mem::align_of::<elina_result_t>(),
        8usize,
        concat!("Alignment of ", stringify!(elina_result_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_result_t>())).exclog as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_result_t),
            "::",
            stringify!(exclog)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_result_t>())).exn as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_result_t),
            "::",
            stringify!(exn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_result_t>())).flag_exact as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_result_t),
            "::",
            stringify!(flag_exact)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_result_t>())).flag_best as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_result_t),
            "::",
            stringify!(flag_best)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elina_funopt_t {
    pub algorithm: ::std::os::raw::c_int,
    pub timeout: size_t,
    pub max_object_size: size_t,
    pub flag_exact_wanted: bool_,
    pub flag_best_wanted: bool_,
}
#[test]
fn bindgen_test_layout_elina_funopt_t() {
    assert_eq!(
        ::std::mem::size_of::<elina_funopt_t>(),
        32usize,
        concat!("Size of: ", stringify!(elina_funopt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<elina_funopt_t>(),
        8usize,
        concat!("Alignment of ", stringify!(elina_funopt_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_funopt_t>())).algorithm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_funopt_t),
            "::",
            stringify!(algorithm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_funopt_t>())).timeout as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_funopt_t),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_funopt_t>())).max_object_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_funopt_t),
            "::",
            stringify!(max_object_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<elina_funopt_t>())).flag_exact_wanted as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_funopt_t),
            "::",
            stringify!(flag_exact_wanted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_funopt_t>())).flag_best_wanted as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_funopt_t),
            "::",
            stringify!(flag_best_wanted)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elina_option_t {
    pub funopt: [elina_funopt_t; 51usize],
    pub abort_if_exception: [bool_; 6usize],
    pub scalar_discr: elina_scalar_discr_t,
}
#[test]
fn bindgen_test_layout_elina_option_t() {
    assert_eq!(
        ::std::mem::size_of::<elina_option_t>(),
        1648usize,
        concat!("Size of: ", stringify!(elina_option_t))
    );
    assert_eq!(
        ::std::mem::align_of::<elina_option_t>(),
        8usize,
        concat!("Alignment of ", stringify!(elina_option_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_option_t>())).funopt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_option_t),
            "::",
            stringify!(funopt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<elina_option_t>())).abort_if_exception as *const _ as usize
        },
        1632usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_option_t),
            "::",
            stringify!(abort_if_exception)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_option_t>())).scalar_discr as *const _ as usize },
        1640usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_option_t),
            "::",
            stringify!(scalar_discr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elina_manager_t {
    pub library: *const ::std::os::raw::c_char,
    pub version: *const ::std::os::raw::c_char,
    pub internal: *mut ::std::os::raw::c_void,
    pub funptr: [*mut ::std::os::raw::c_void; 51usize],
    pub option: elina_option_t,
    pub result: elina_result_t,
    pub internal_free:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub count: size_t,
}
#[test]
fn bindgen_test_layout_elina_manager_t() {
    assert_eq!(
        ::std::mem::size_of::<elina_manager_t>(),
        2112usize,
        concat!("Size of: ", stringify!(elina_manager_t))
    );
    assert_eq!(
        ::std::mem::align_of::<elina_manager_t>(),
        8usize,
        concat!("Alignment of ", stringify!(elina_manager_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_manager_t>())).library as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_manager_t),
            "::",
            stringify!(library)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_manager_t>())).version as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_manager_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_manager_t>())).internal as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_manager_t),
            "::",
            stringify!(internal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_manager_t>())).funptr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_manager_t),
            "::",
            stringify!(funptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_manager_t>())).option as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_manager_t),
            "::",
            stringify!(option)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_manager_t>())).result as *const _ as usize },
        2080usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_manager_t),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_manager_t>())).internal_free as *const _ as usize },
        2096usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_manager_t),
            "::",
            stringify!(internal_free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_manager_t>())).count as *const _ as usize },
        2104usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_manager_t),
            "::",
            stringify!(count)
        )
    );
}
extern "C" {
    pub fn elina_manager_clear_exclog(man: *mut elina_manager_t);
}
extern "C" {
    pub fn elina_manager_free(man: *mut elina_manager_t);
}
extern "C" {
    pub fn elina_manager_get_library(man: *mut elina_manager_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn elina_manager_get_version(man: *mut elina_manager_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn elina_manager_get_funopt(
        man: *mut elina_manager_t,
        funid: elina_funid_t,
    ) -> elina_funopt_t;
}
extern "C" {
    pub fn elina_manager_get_abort_if_exception(
        man: *mut elina_manager_t,
        exn: elina_exc_t,
    ) -> bool_;
}
extern "C" {
    pub fn elina_manager_get_exception(man: *mut elina_manager_t) -> elina_exc_t;
}
extern "C" {
    pub fn elina_manager_get_exclog(man: *mut elina_manager_t) -> *mut elina_exclog_t;
}
extern "C" {
    pub fn elina_manager_get_flag_exact(man: *mut elina_manager_t) -> bool_;
}
extern "C" {
    pub fn elina_manager_get_flag_best(man: *mut elina_manager_t) -> bool_;
}
extern "C" {
    pub fn elina_funopt_init(fopt: *mut elina_funopt_t);
}
extern "C" {
    pub fn elina_manager_set_funopt(
        man: *mut elina_manager_t,
        funid: elina_funid_t,
        funopt: *mut elina_funopt_t,
    );
}
extern "C" {
    pub fn elina_manager_set_abort_if_exception(
        man: *mut elina_manager_t,
        exn: elina_exc_t,
        flag: bool_,
    );
}
extern "C" {
    pub fn elina_fpu_init() -> bool_;
}
extern "C" {
    pub fn elina_manager_alloc(
        library: *const ::std::os::raw::c_char,
        version: *const ::std::os::raw::c_char,
        internal: *mut ::std::os::raw::c_void,
        internal_free: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
    ) -> *mut elina_manager_t;
}
extern "C" {
    pub fn elina_manager_raise_exception(
        man: *mut elina_manager_t,
        exn: elina_exc_t,
        funid: elina_funid_t,
        msg: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn elina_exc_cons(
        exn: elina_exc_t,
        funid: elina_funid_t,
        msg: *const ::std::os::raw::c_char,
        tail: *mut elina_exclog_t,
    ) -> *mut elina_exclog_t;
}
extern "C" {
    pub fn elina_exclog_free(head: *mut elina_exclog_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elina_abstract0_t {
    pub value: *mut ::std::os::raw::c_void,
    pub man: *mut elina_manager_t,
}
#[test]
fn bindgen_test_layout_elina_abstract0_t() {
    assert_eq!(
        ::std::mem::size_of::<elina_abstract0_t>(),
        16usize,
        concat!("Size of: ", stringify!(elina_abstract0_t))
    );
    assert_eq!(
        ::std::mem::align_of::<elina_abstract0_t>(),
        8usize,
        concat!("Alignment of ", stringify!(elina_abstract0_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_abstract0_t>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_abstract0_t),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_abstract0_t>())).man as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_abstract0_t),
            "::",
            stringify!(man)
        )
    );
}
extern "C" {
    pub fn elina_abstract0_copy(
        man: *mut elina_manager_t,
        a: *mut elina_abstract0_t,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_abstract0_free(man: *mut elina_manager_t, a: *mut elina_abstract0_t);
}
extern "C" {
    pub fn elina_abstract0_size(man: *mut elina_manager_t, a: *mut elina_abstract0_t) -> size_t;
}
extern "C" {
    pub fn elina_abstract0_minimize(man: *mut elina_manager_t, a: *mut elina_abstract0_t);
}
extern "C" {
    pub fn elina_abstract0_canonicalize(man: *mut elina_manager_t, a: *mut elina_abstract0_t);
}
extern "C" {
    pub fn elina_abstract0_hash(
        man: *mut elina_manager_t,
        a: *mut elina_abstract0_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn elina_abstract0_approximate(
        man: *mut elina_manager_t,
        a: *mut elina_abstract0_t,
        algorithm: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn elina_abstract0_fprint(
        stream: *mut FILE,
        man: *mut elina_manager_t,
        a: *mut elina_abstract0_t,
        name_of_dim: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn elina_abstract0_fprintdiff(
        stream: *mut FILE,
        man: *mut elina_manager_t,
        a1: *mut elina_abstract0_t,
        a2: *mut elina_abstract0_t,
        name_of_dim: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn elina_abstract0_fdump(
        stream: *mut FILE,
        man: *mut elina_manager_t,
        a: *mut elina_abstract0_t,
    );
}
extern "C" {
    pub fn elina_abstract0_serialize_raw(
        man: *mut elina_manager_t,
        a: *mut elina_abstract0_t,
    ) -> elina_membuf_t;
}
extern "C" {
    pub fn elina_abstract0_deserialize_raw(
        man: *mut elina_manager_t,
        ptr: *mut ::std::os::raw::c_void,
        size: *mut size_t,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_abstract0_bottom(
        man: *mut elina_manager_t,
        intdim: size_t,
        realdim: size_t,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_abstract0_top(
        man: *mut elina_manager_t,
        intdim: size_t,
        realdim: size_t,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_abstract0_of_box(
        man: *mut elina_manager_t,
        intdim: size_t,
        realdim: size_t,
        tinterval: *mut *mut elina_interval_t,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_abstract0_dimension(
        man: *mut elina_manager_t,
        a: *mut elina_abstract0_t,
    ) -> elina_dimension_t;
}
extern "C" {
    pub fn elina_abstract0_is_bottom(man: *mut elina_manager_t, a: *mut elina_abstract0_t)
        -> bool_;
}
extern "C" {
    pub fn elina_abstract0_is_top(man: *mut elina_manager_t, a: *mut elina_abstract0_t) -> bool_;
}
extern "C" {
    pub fn elina_abstract0_is_leq(
        man: *mut elina_manager_t,
        a1: *mut elina_abstract0_t,
        a2: *mut elina_abstract0_t,
    ) -> bool_;
}
extern "C" {
    pub fn elina_abstract0_is_eq(
        man: *mut elina_manager_t,
        a1: *mut elina_abstract0_t,
        a2: *mut elina_abstract0_t,
    ) -> bool_;
}
extern "C" {
    pub fn elina_abstract0_sat_lincons(
        man: *mut elina_manager_t,
        a: *mut elina_abstract0_t,
        lincons: *mut elina_lincons0_t,
    ) -> bool_;
}
extern "C" {
    pub fn elina_abstract0_sat_tcons(
        man: *mut elina_manager_t,
        a: *mut elina_abstract0_t,
        tcons: *mut elina_tcons0_t,
    ) -> bool_;
}
extern "C" {
    pub fn elina_abstract0_sat_interval(
        man: *mut elina_manager_t,
        a: *mut elina_abstract0_t,
        dim: elina_dim_t,
        interval: *mut elina_interval_t,
    ) -> bool_;
}
extern "C" {
    pub fn elina_abstract0_is_dimension_unconstrained(
        man: *mut elina_manager_t,
        a: *mut elina_abstract0_t,
        dim: elina_dim_t,
    ) -> bool_;
}
extern "C" {
    pub fn elina_abstract0_bound_linexpr(
        man: *mut elina_manager_t,
        a: *mut elina_abstract0_t,
        expr: *mut elina_linexpr0_t,
    ) -> *mut elina_interval_t;
}
extern "C" {
    pub fn elina_abstract0_bound_texpr(
        man: *mut elina_manager_t,
        a: *mut elina_abstract0_t,
        expr: *mut elina_texpr0_t,
    ) -> *mut elina_interval_t;
}
extern "C" {
    pub fn elina_abstract0_bound_dimension(
        man: *mut elina_manager_t,
        a: *mut elina_abstract0_t,
        dim: elina_dim_t,
    ) -> *mut elina_interval_t;
}
extern "C" {
    pub fn elina_abstract0_to_lincons_array(
        man: *mut elina_manager_t,
        a: *mut elina_abstract0_t,
    ) -> elina_lincons0_array_t;
}
extern "C" {
    pub fn elina_abstract0_to_tcons_array(
        man: *mut elina_manager_t,
        a: *mut elina_abstract0_t,
    ) -> elina_tcons0_array_t;
}
extern "C" {
    pub fn elina_abstract0_to_box(
        man: *mut elina_manager_t,
        a: *mut elina_abstract0_t,
    ) -> *mut *mut elina_interval_t;
}
extern "C" {
    pub fn elina_abstract0_meet(
        man: *mut elina_manager_t,
        destructive: bool_,
        a1: *mut elina_abstract0_t,
        a2: *mut elina_abstract0_t,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_abstract0_join(
        man: *mut elina_manager_t,
        destructive: bool_,
        a1: *mut elina_abstract0_t,
        a2: *mut elina_abstract0_t,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_abstract0_meet_array(
        man: *mut elina_manager_t,
        tab: *mut *mut elina_abstract0_t,
        size: size_t,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_abstract0_join_array(
        man: *mut elina_manager_t,
        tab: *mut *mut elina_abstract0_t,
        size: size_t,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_abstract0_meet_lincons_array(
        man: *mut elina_manager_t,
        destructive: bool_,
        a: *mut elina_abstract0_t,
        array: *mut elina_lincons0_array_t,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_abstract0_meet_tcons_array(
        man: *mut elina_manager_t,
        destructive: bool_,
        a: *mut elina_abstract0_t,
        array: *mut elina_tcons0_array_t,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_abstract0_assign_linexpr_array(
        man: *mut elina_manager_t,
        destructive: bool_,
        org: *mut elina_abstract0_t,
        tdim: *mut elina_dim_t,
        texpr: *mut *mut elina_linexpr0_t,
        size: size_t,
        dest: *mut elina_abstract0_t,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_abstract0_assign_texpr_array(
        man: *mut elina_manager_t,
        destructive: bool_,
        org: *mut elina_abstract0_t,
        tdim: *mut elina_dim_t,
        texpr: *mut *mut elina_texpr0_t,
        size: size_t,
        dest: *mut elina_abstract0_t,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_abstract0_substitute_linexpr_array(
        man: *mut elina_manager_t,
        destructive: bool_,
        org: *mut elina_abstract0_t,
        tdim: *mut elina_dim_t,
        texpr: *mut *mut elina_linexpr0_t,
        size: size_t,
        dest: *mut elina_abstract0_t,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_abstract0_substitute_texpr_array(
        man: *mut elina_manager_t,
        destructive: bool_,
        org: *mut elina_abstract0_t,
        tdim: *mut elina_dim_t,
        texpr: *mut *mut elina_texpr0_t,
        size: size_t,
        dest: *mut elina_abstract0_t,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_abstract0_forget_array(
        man: *mut elina_manager_t,
        destructive: bool_,
        a: *mut elina_abstract0_t,
        tdim: *mut elina_dim_t,
        size: size_t,
        project: bool_,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_abstract0_add_dimensions(
        man: *mut elina_manager_t,
        destructive: bool_,
        a: *mut elina_abstract0_t,
        dimchange: *mut elina_dimchange_t,
        project: bool_,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_abstract0_remove_dimensions(
        man: *mut elina_manager_t,
        destructive: bool_,
        a: *mut elina_abstract0_t,
        dimchange: *mut elina_dimchange_t,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_abstract0_permute_dimensions(
        man: *mut elina_manager_t,
        destructive: bool_,
        a: *mut elina_abstract0_t,
        perm: *mut elina_dimperm_t,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_abstract0_expand(
        man: *mut elina_manager_t,
        destructive: bool_,
        a: *mut elina_abstract0_t,
        dim: elina_dim_t,
        n: size_t,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_abstract0_fold(
        man: *mut elina_manager_t,
        destructive: bool_,
        a: *mut elina_abstract0_t,
        tdim: *mut elina_dim_t,
        size: size_t,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_abstract0_widening(
        man: *mut elina_manager_t,
        a1: *mut elina_abstract0_t,
        a2: *mut elina_abstract0_t,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_abstract0_closure(
        man: *mut elina_manager_t,
        destructive: bool_,
        a: *mut elina_abstract0_t,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_abstract0_of_lincons_array(
        man: *mut elina_manager_t,
        intdim: size_t,
        realdim: size_t,
        array: *mut elina_lincons0_array_t,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_abstract0_of_tcons_array(
        man: *mut elina_manager_t,
        intdim: size_t,
        realdim: size_t,
        array: *mut elina_tcons0_array_t,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_abstract0_assign_linexpr(
        man: *mut elina_manager_t,
        destructive: bool_,
        org: *mut elina_abstract0_t,
        dim: elina_dim_t,
        expr: *mut elina_linexpr0_t,
        dest: *mut elina_abstract0_t,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_abstract0_assign_texpr(
        man: *mut elina_manager_t,
        destructive: bool_,
        org: *mut elina_abstract0_t,
        dim: elina_dim_t,
        expr: *mut elina_texpr0_t,
        dest: *mut elina_abstract0_t,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_abstract0_substitute_linexpr(
        man: *mut elina_manager_t,
        destructive: bool_,
        org: *mut elina_abstract0_t,
        dim: elina_dim_t,
        expr: *mut elina_linexpr0_t,
        dest: *mut elina_abstract0_t,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_abstract0_substitute_texpr(
        man: *mut elina_manager_t,
        destructive: bool_,
        org: *mut elina_abstract0_t,
        dim: elina_dim_t,
        expr: *mut elina_texpr0_t,
        dest: *mut elina_abstract0_t,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_abstract0_apply_dimchange2(
        man: *mut elina_manager_t,
        destructive: bool_,
        a: *mut elina_abstract0_t,
        dimchange2: *mut elina_dimchange2_t,
        project: bool_,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_abstract0_widening_threshold(
        man: *mut elina_manager_t,
        a1: *mut elina_abstract0_t,
        a2: *mut elina_abstract0_t,
        array: *mut elina_lincons0_array_t,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_abstract0_checkman1_raise(
        funid: elina_funid_t,
        man: *mut elina_manager_t,
        a: *mut elina_abstract0_t,
    );
}
extern "C" {
    pub fn elina_abstract0_checkman2(
        funid: elina_funid_t,
        man: *mut elina_manager_t,
        a1: *mut elina_abstract0_t,
        a2: *mut elina_abstract0_t,
    ) -> bool_;
}
extern "C" {
    pub fn elina_abstract0_checkman_array(
        funid: elina_funid_t,
        man: *mut elina_manager_t,
        tab: *mut *mut elina_abstract0_t,
        size: size_t,
    ) -> bool_;
}
extern "C" {
    pub fn elina_abstract0_check_abstract2(
        funid: elina_funid_t,
        man: *mut elina_manager_t,
        a1: *mut elina_abstract0_t,
        a2: *mut elina_abstract0_t,
    ) -> bool_;
}
extern "C" {
    pub fn elina_abstract0_check_abstract_array(
        funid: elina_funid_t,
        man: *mut elina_manager_t,
        tab: *mut *mut elina_abstract0_t,
        size: size_t,
    ) -> bool_;
}
extern "C" {
    pub fn elina_abstract0_check_dim_raise(
        funid: elina_funid_t,
        man: *mut elina_manager_t,
        dimension: elina_dimension_t,
        dim: elina_dim_t,
        prefix: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn elina_abstract0_check_dim_array(
        funid: elina_funid_t,
        man: *mut elina_manager_t,
        dimension: elina_dimension_t,
        tdim: *mut elina_dim_t,
        size: size_t,
    ) -> bool_;
}
extern "C" {
    pub fn elina_abstract0_check_expr_raise(
        funid: elina_funid_t,
        man: *mut elina_manager_t,
        dimension: elina_dimension_t,
        dim: elina_dim_t,
        prefix: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn elina_abstract0_check_linexpr_check(
        dimension: elina_dimension_t,
        expr: *mut elina_linexpr0_t,
    ) -> elina_dim_t;
}
extern "C" {
    pub fn elina_abstract0_check_linexpr(
        funid: elina_funid_t,
        man: *mut elina_manager_t,
        dimension: elina_dimension_t,
        expr: *mut elina_linexpr0_t,
    ) -> bool_;
}
extern "C" {
    pub fn elina_abstract0_check_texpr_check(
        dimension: elina_dimension_t,
        expr: *mut elina_texpr0_t,
    ) -> elina_dim_t;
}
extern "C" {
    pub fn elina_abstract0_check_texpr(
        funid: elina_funid_t,
        man: *mut elina_manager_t,
        dimension: elina_dimension_t,
        expr: *mut elina_texpr0_t,
    ) -> bool_;
}
extern "C" {
    pub fn elina_abstract0_check_linexpr_array(
        funid: elina_funid_t,
        man: *mut elina_manager_t,
        dimension: elina_dimension_t,
        texpr: *mut *mut elina_linexpr0_t,
        size: size_t,
    ) -> bool_;
}
extern "C" {
    pub fn elina_abstract0_check_lincons_array(
        funid: elina_funid_t,
        man: *mut elina_manager_t,
        dimension: elina_dimension_t,
        array: *mut elina_lincons0_array_t,
    ) -> bool_;
}
extern "C" {
    pub fn elina_abstract0_check_texpr_array(
        funid: elina_funid_t,
        man: *mut elina_manager_t,
        dimension: elina_dimension_t,
        texpr: *mut *mut elina_texpr0_t,
        size: size_t,
    ) -> bool_;
}
extern "C" {
    pub fn elina_abstract0_check_tcons_array(
        funid: elina_funid_t,
        man: *mut elina_manager_t,
        dimension: elina_dimension_t,
        array: *mut elina_tcons0_array_t,
    ) -> bool_;
}
extern "C" {
    pub fn elina_abstract0_meetjoin(
        funid: elina_funid_t,
        man: *mut elina_manager_t,
        destructive: bool_,
        a1: *mut elina_abstract0_t,
        a2: *mut elina_abstract0_t,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_abstract0_asssub_linexpr(
        funid: elina_funid_t,
        man: *mut elina_manager_t,
        destructive: bool_,
        a: *mut elina_abstract0_t,
        dim: elina_dim_t,
        expr: *mut elina_linexpr0_t,
        dest: *mut elina_abstract0_t,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_abstract0_asssub_linexpr_array(
        funid: elina_funid_t,
        man: *mut elina_manager_t,
        destructive: bool_,
        a: *mut elina_abstract0_t,
        tdim: *mut elina_dim_t,
        texpr: *mut *mut elina_linexpr0_t,
        size: size_t,
        dest: *mut elina_abstract0_t,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_abstract0_asssub_texpr(
        funid: elina_funid_t,
        man: *mut elina_manager_t,
        destructive: bool_,
        a: *mut elina_abstract0_t,
        dim: elina_dim_t,
        expr: *mut elina_texpr0_t,
        dest: *mut elina_abstract0_t,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_abstract0_asssub_texpr_array(
        funid: elina_funid_t,
        man: *mut elina_manager_t,
        destructive: bool_,
        a: *mut elina_abstract0_t,
        tdim: *mut elina_dim_t,
        texpr: *mut *mut elina_texpr0_t,
        size: size_t,
        dest: *mut elina_abstract0_t,
    ) -> *mut elina_abstract0_t;
}
extern "C" {
    pub fn elina_scalar_add_uint(
        a: *mut elina_scalar_t,
        b: *mut elina_scalar_t,
        c: ::std::os::raw::c_ulong,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_scalar_add(
        op: *mut elina_scalar_t,
        op1: *mut elina_scalar_t,
        op2: *mut elina_scalar_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_scalar_mul(
        op: *mut elina_scalar_t,
        op1: *mut elina_scalar_t,
        op2: *mut elina_scalar_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_scalar_sub_uint(
        a: *mut elina_scalar_t,
        b: *mut elina_scalar_t,
        c: ::std::os::raw::c_ulong,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_scalar_sub(
        a: *mut elina_scalar_t,
        b: *mut elina_scalar_t,
        c: *mut elina_scalar_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_scalar_div_2(dst: *mut elina_scalar_t, src: *mut elina_scalar_t);
}
extern "C" {
    pub fn elina_scalar_div(
        a: *mut elina_scalar_t,
        b: *mut elina_scalar_t,
        c: *mut elina_scalar_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_scalar_max(
        op: *mut elina_scalar_t,
        op1: *mut elina_scalar_t,
        op2: *mut elina_scalar_t,
    );
}
extern "C" {
    pub fn elina_scalar_min(
        op: *mut elina_scalar_t,
        op1: *mut elina_scalar_t,
        op2: *mut elina_scalar_t,
    );
}
extern "C" {
    pub fn elina_scalar_sqrt(
        up: *mut elina_scalar_t,
        down: *mut elina_scalar_t,
        b: *mut elina_scalar_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn int_set_elina_scalar(a: *mut ::std::os::raw::c_long, scalar: *mut elina_scalar_t);
}
extern "C" {
    pub fn elina_scalar_pow(
        up: *mut elina_scalar_t,
        down: *mut elina_scalar_t,
        b: *mut elina_scalar_t,
        n: ::std::os::raw::c_ulong,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_scalar_ceil(
        a: *mut elina_scalar_t,
        b: *mut elina_scalar_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_scalar_floor(
        a: *mut elina_scalar_t,
        b: *mut elina_scalar_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_scalar_trunc(
        a: *mut elina_scalar_t,
        b: *mut elina_scalar_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_scalar_to_double(
        a: *mut elina_scalar_t,
        b: *mut elina_scalar_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_scalar_to_float(
        a: *mut elina_scalar_t,
        b: *mut elina_scalar_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_scalar_is_integer(a: *mut elina_scalar_t) -> bool_;
}
extern "C" {
    pub fn elina_scalar_set_to_int(
        a: *mut elina_scalar_t,
        i: elina_int_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_scalar_mul_2exp(
        a: *mut elina_scalar_t,
        b: *mut elina_scalar_t,
        c: ::std::os::raw::c_int,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_scalar_convert(a: *mut elina_scalar_t, discr: elina_scalar_discr_t);
}
extern "C" {
    pub fn elina_interval_add(
        op: *mut elina_interval_t,
        op1: *mut elina_interval_t,
        op2: *mut elina_interval_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_interval_mul_scalar(
        dst: *mut elina_interval_t,
        src: *mut elina_interval_t,
        mul: *mut elina_scalar_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_interval_mul(
        op: *mut elina_interval_t,
        op1: *mut elina_interval_t,
        op2: *mut elina_interval_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_interval_sub(
        a: *mut elina_interval_t,
        b: *mut elina_interval_t,
        c: *mut elina_interval_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_interval_sqrt(
        dst: *mut elina_interval_t,
        src: *mut elina_interval_t,
        discr: elina_scalar_discr_t,
    ) -> bool_;
}
extern "C" {
    pub fn elina_interval_pow(
        a: *mut elina_interval_t,
        b: *mut elina_interval_t,
        n: *mut elina_interval_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_interval_abs(
        a: *mut elina_interval_t,
        b: *mut elina_interval_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_interval_trunc(
        a: *mut elina_interval_t,
        b: *mut elina_interval_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_interval_ceil(
        a: *mut elina_interval_t,
        b: *mut elina_interval_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_interval_floor(
        a: *mut elina_interval_t,
        b: *mut elina_interval_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_interval_to_int(
        a: *mut elina_interval_t,
        b: *mut elina_interval_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_interval_to_float(
        a: *mut elina_interval_t,
        b: *mut elina_interval_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_interval_to_double(
        a: *mut elina_interval_t,
        b: *mut elina_interval_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_interval_div(
        a: *mut elina_interval_t,
        b: *mut elina_interval_t,
        c: *mut elina_interval_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_interval_mod(
        a: *mut elina_interval_t,
        b: *mut elina_interval_t,
        c: *mut elina_interval_t,
        is_int: bool_,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_interval_is_int(a: *mut elina_interval_t, discr: elina_scalar_discr_t) -> bool_;
}
extern "C" {
    pub fn elina_interval_magnitude(a: *mut elina_scalar_t, b: *mut elina_interval_t);
}
extern "C" {
    pub fn elina_interval_range_rel(
        a: *mut elina_scalar_t,
        b: *mut elina_interval_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_interval_enlarge_bound(
        a: *mut elina_interval_t,
        b: *mut elina_interval_t,
        c: *mut elina_scalar_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_interval_canonicalize(
        a: *mut elina_interval_t,
        integer: bool_,
        discr: elina_scalar_discr_t,
    ) -> bool_;
}
extern "C" {
    pub fn elina_interval_set_to_int(
        a: *mut elina_interval_t,
        i: elina_int_t,
        j: elina_int_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_interval_mul_2exp(
        a: *mut elina_interval_t,
        b: *mut elina_interval_t,
        i: ::std::os::raw::c_int,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_interval_convert(a: *mut elina_interval_t, discr: elina_scalar_discr_t);
}
extern "C" {
    pub fn elina_coeff_mul_scalar(
        dst: *mut elina_coeff_t,
        src: *mut elina_coeff_t,
        mul: *mut elina_scalar_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_coeff_add(
        op: *mut elina_coeff_t,
        op1: *mut elina_coeff_t,
        op2: *mut elina_coeff_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_coeff_sub_num(
        dst: *mut elina_coeff_t,
        src: *mut elina_coeff_t,
        sub: *mut elina_scalar_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_coeff_mul_interval(
        dst: *mut elina_coeff_t,
        src: *mut elina_coeff_t,
        interval: *mut elina_interval_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_interval_set_elina_coeff(
        interval: *mut elina_interval_t,
        coeff: *mut elina_coeff_t,
    );
}
extern "C" {
    pub fn elina_linexpr0_reinit(expr: *mut elina_linexpr0_t, size: size_t);
}
extern "C" {
    pub fn elina_linexpr0_init(expr: *mut elina_linexpr0_t, size: size_t);
}
extern "C" {
    pub fn elina_linexpr0_clear(e: *mut elina_linexpr0_t);
}
extern "C" {
    pub fn elina_linexpr0_neg(expr: *mut elina_linexpr0_t);
}
extern "C" {
    pub fn elina_linexpr0_scale(
        expr: *mut elina_linexpr0_t,
        interval: *mut elina_interval_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_linexpr0_add(
        res: *mut *mut elina_linexpr0_t,
        exprA: *mut *mut elina_linexpr0_t,
        exprB: *mut *mut elina_linexpr0_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_linexpr0_sub(
        res: *mut *mut elina_linexpr0_t,
        exprA: *mut *mut elina_linexpr0_t,
        exprB: *mut *mut elina_linexpr0_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_linexpr0_div(
        expr: *mut elina_linexpr0_t,
        interval: *mut elina_interval_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn linearize_elina_lincons0_array(
        array: *mut elina_lincons0_array_t,
        meet: bool_,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn quasilinearize_elina_linexpr0(
        expr: *mut elina_linexpr0_t,
        env: *mut *mut elina_interval_t,
        for_meet_inequality: bool_,
        discr: elina_scalar_discr_t,
    ) -> bool_;
}
extern "C" {
    pub fn quasilinearize_elina_lincons0(
        cons: *mut elina_lincons0_t,
        env: *mut *mut elina_interval_t,
        meet: bool_,
        discr: elina_scalar_discr_t,
    ) -> bool_;
}
extern "C" {
    pub fn quasilinearize_elina_lincons0_array(
        array: *mut elina_lincons0_array_t,
        env: *mut *mut elina_interval_t,
        meet: bool_,
        discr: elina_scalar_discr_t,
    ) -> bool_;
}
extern "C" {
    pub fn elina_lincons0_reduce_integer(
        cons: *mut elina_lincons0_t,
        intdim: size_t,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn elina_lincons0_array_reduce_integer(
        array: *mut elina_lincons0_array_t,
        intdim: size_t,
        discr: elina_scalar_discr_t,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn elina_lincons0_set_bool(
        cons: *mut elina_lincons0_t,
        value: bool_,
        discr: elina_scalar_discr_t,
    );
}
extern "C" {
    pub fn eval_elina_cstlincons0(cons: *mut elina_lincons0_t) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn elina_lincons0_array_reinit(array: *mut elina_lincons0_array_t, size: size_t);
}
extern "C" {
    pub fn elina_interval_eval_elina_linexpr0(
        itv: *mut elina_interval_t,
        expr: *mut elina_linexpr0_t,
        env: *mut *mut elina_interval_t,
        discr: elina_scalar_discr_t,
    ) -> bool_;
}
extern "C" {
    pub fn eval_elina_linexpr0(
        man: *mut elina_manager_t,
        abs: *mut elina_abstract0_t,
        expr: *mut elina_linexpr0_t,
        discr: elina_scalar_discr_t,
        pexact: *mut bool_,
    ) -> *mut elina_interval_t;
}
extern "C" {
    pub fn elina_quasilinearize_linexpr0(
        man: *mut elina_manager_t,
        abs: *mut ::std::os::raw::c_void,
        linexpr0: *mut elina_linexpr0_t,
        pexact: *mut bool_,
        discr: elina_scalar_discr_t,
    ) -> *mut elina_linexpr0_t;
}
extern "C" {
    pub fn elina_quasilinearize_lincons0(
        man: *mut elina_manager_t,
        abs: *mut ::std::os::raw::c_void,
        lincons0: *mut elina_lincons0_t,
        pexact: *mut bool_,
        discr: elina_scalar_discr_t,
        meet: bool_,
    ) -> elina_lincons0_t;
}
extern "C" {
    pub fn elina_quasilinearize_linexpr0_array(
        man: *mut elina_manager_t,
        abs: *mut ::std::os::raw::c_void,
        texpr: *mut *mut elina_linexpr0_t,
        size: size_t,
        pexact: *mut bool_,
        discr: elina_scalar_discr_t,
    ) -> *mut *mut elina_linexpr0_t;
}
extern "C" {
    pub fn elina_quasilinearize_lincons0_array(
        man: *mut elina_manager_t,
        abs: *mut ::std::os::raw::c_void,
        array: *mut elina_lincons0_array_t,
        pexact: *mut bool_,
        discr: elina_scalar_discr_t,
        linearize: bool_,
        meet: bool_,
    ) -> elina_lincons0_array_t;
}
extern "C" {
    pub fn elina_eval_texpr0(
        man: *mut elina_manager_t,
        abs: *mut elina_abstract0_t,
        expr: *mut elina_texpr0_t,
        discr: elina_scalar_discr_t,
        pexact: *mut bool_,
    ) -> *mut elina_interval_t;
}
extern "C" {
    pub fn elina_intlinearize_texpr0_intlinear(
        man: *mut elina_manager_t,
        expr: *mut elina_texpr0_t,
        discr: elina_scalar_discr_t,
    ) -> *mut elina_linexpr0_t;
}
extern "C" {
    pub fn elina_intlinearize_texpr0(
        man: *mut elina_manager_t,
        abs: *mut elina_abstract0_t,
        expr: *mut elina_texpr0_t,
        pexact: *mut bool_,
        discr: elina_scalar_discr_t,
        quasilinearize: bool_,
    ) -> *mut elina_linexpr0_t;
}
extern "C" {
    pub fn elina_intlinearize_texpr0_array(
        man: *mut elina_manager_t,
        abs: *mut elina_abstract0_t,
        texpr: *mut *mut elina_texpr0_t,
        size: size_t,
        pexact: *mut bool_,
        discr: elina_scalar_discr_t,
        quasilinearize: bool_,
    ) -> *mut *mut elina_linexpr0_t;
}
extern "C" {
    pub fn elina_intlinearize_tcons0(
        man: *mut elina_manager_t,
        abs: *mut elina_abstract0_t,
        cons: *mut elina_tcons0_t,
        pexact: *mut bool_,
        discr: elina_scalar_discr_t,
        quasilinearize: bool_,
        meet: bool_,
    ) -> elina_lincons0_t;
}
extern "C" {
    pub fn elina_intlinearize_tcons0_array(
        man: *mut elina_manager_t,
        abs: *mut elina_abstract0_t,
        array: *mut elina_tcons0_array_t,
        pexact: *mut bool_,
        discr: elina_scalar_discr_t,
        type_: elina_linexpr_type_t,
        meet: bool_,
        boxize: bool_,
        kmax: size_t,
        intervalonly: bool_,
    ) -> elina_lincons0_array_t;
}
extern "C" {
    pub fn elina_generic_sat_tcons(
        man: *mut elina_manager_t,
        abs: *mut ::std::os::raw::c_void,
        cons: *mut elina_tcons0_t,
        discr: elina_scalar_discr_t,
        quasilinearize: bool_,
    ) -> bool_;
}
extern "C" {
    pub fn elina_generic_bound_texpr(
        man: *mut elina_manager_t,
        abs: *mut ::std::os::raw::c_void,
        expr: *mut elina_texpr0_t,
        discr: elina_scalar_discr_t,
        quasilinearize: bool_,
    ) -> *mut elina_interval_t;
}
extern "C" {
    pub fn elina_generic_to_tcons_array(
        man: *mut elina_manager_t,
        abs: *mut ::std::os::raw::c_void,
    ) -> elina_tcons0_array_t;
}
extern "C" {
    pub fn elina_generic_meetjoin_array(
        meet: bool_,
        man: *mut elina_manager_t,
        tab: *mut *mut ::std::os::raw::c_void,
        size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn elina_generic_meet_quasilinearize_lincons_array(
        man: *mut elina_manager_t,
        destructive: bool_,
        abs: *mut ::std::os::raw::c_void,
        array: *mut elina_lincons0_array_t,
        discr: elina_scalar_discr_t,
        linearize: bool_,
        meet_lincons_array: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut elina_manager_t,
                arg2: bool_,
                arg3: *mut ::std::os::raw::c_void,
                arg4: *mut elina_lincons0_array_t,
            ) -> *mut ::std::os::raw::c_void,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn elina_generic_meet_intlinearize_tcons_array(
        man: *mut elina_manager_t,
        destructive: bool_,
        abs: *mut ::std::os::raw::c_void,
        array: *mut elina_tcons0_array_t,
        discr: elina_scalar_discr_t,
        linearize: elina_linexpr_type_t,
        meet_lincons_array: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut elina_manager_t,
                arg2: bool_,
                arg3: *mut ::std::os::raw::c_void,
                arg4: *mut elina_lincons0_array_t,
            ) -> *mut ::std::os::raw::c_void,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn elina_generic_asssub_linexpr_array(
        assign: bool_,
        man: *mut elina_manager_t,
        destructive: bool_,
        abs: *mut ::std::os::raw::c_void,
        tdim: *mut elina_dim_t,
        texpr: *mut *mut elina_linexpr0_t,
        size: size_t,
        dest: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn elina_generic_asssub_texpr_array(
        assign: bool_,
        man: *mut elina_manager_t,
        destructive: bool_,
        abs: *mut ::std::os::raw::c_void,
        tdim: *mut elina_dim_t,
        texpr: *mut *mut elina_texpr0_t,
        size: size_t,
        dest: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elina_float_const {
    pub ulp: *mut elina_interval_t,
    pub min: *mut elina_interval_t,
    pub min_normal: *mut elina_interval_t,
    pub max: *mut elina_interval_t,
    pub max_exact: *mut elina_interval_t,
}
#[test]
fn bindgen_test_layout_elina_float_const() {
    assert_eq!(
        ::std::mem::size_of::<elina_float_const>(),
        40usize,
        concat!("Size of: ", stringify!(elina_float_const))
    );
    assert_eq!(
        ::std::mem::align_of::<elina_float_const>(),
        8usize,
        concat!("Alignment of ", stringify!(elina_float_const))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_float_const>())).ulp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_float_const),
            "::",
            stringify!(ulp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_float_const>())).min as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_float_const),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_float_const>())).min_normal as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_float_const),
            "::",
            stringify!(min_normal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_float_const>())).max as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_float_const),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<elina_float_const>())).max_exact as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(elina_float_const),
            "::",
            stringify!(max_exact)
        )
    );
}
extern "C" {
    pub fn elina_interval_eval_elina_texpr0(
        res: *mut elina_interval_t,
        expr: *mut elina_texpr0_t,
        discr: elina_scalar_discr_t,
        env: *mut *mut elina_interval_t,
    );
}
extern "C" {
    pub fn elina_intlinearize_elina_texpr0_intlinear(
        res: *mut *mut elina_linexpr0_t,
        expr: *mut elina_texpr0_t,
        discr: elina_scalar_discr_t,
    ) -> bool_;
}
extern "C" {
    pub fn elina_boxize_lincons0_array(
        res: *mut *mut elina_interval_t,
        tchange: *mut bool_,
        array: *mut elina_lincons0_array_t,
        env: *mut *mut elina_interval_t,
        intdim: size_t,
        kmax: size_t,
        intervalonly: bool_,
        discr: elina_scalar_discr_t,
    ) -> bool_;
}
extern "C" {
    pub fn elina_interval_intlinearize_texpr0_rec(
        expr: *mut elina_texpr0_t,
        env: *mut *mut elina_interval_t,
        intdim: size_t,
        lres: *mut *mut elina_linexpr0_t,
        ires: *mut elina_interval_t,
        discr: elina_scalar_discr_t,
    ) -> elina_texpr_rtype_t;
}
extern "C" {
    pub fn elina_intlinearize_elina_tcons0(
        res: *mut elina_lincons0_t,
        cons: *mut elina_tcons0_t,
        env: *mut *mut elina_interval_t,
        intdim: size_t,
        discr: elina_scalar_discr_t,
    ) -> bool_;
}
pub const opt_pk_status_t_opt_pk_status_conseps: opt_pk_status_t = 1;
pub const opt_pk_status_t_opt_pk_status_consgauss: opt_pk_status_t = 2;
pub const opt_pk_status_t_opt_pk_status_gengauss: opt_pk_status_t = 4;
pub const opt_pk_status_t_opt_pk_status_minimaleps: opt_pk_status_t = 8;
pub type opt_pk_status_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct opt_pk_t {
    pub C: *mut opt_matrix_t,
    pub F: *mut opt_matrix_t,
    pub satC: *mut opt_satmat_t,
    pub satF: *mut opt_satmat_t,
    pub intdim: ::std::os::raw::c_ushort,
    pub realdim: ::std::os::raw::c_ushort,
    pub nbeq: size_t,
    pub nbline: size_t,
    pub is_minimized: bool_,
    pub status: opt_pk_status_t,
}
#[test]
fn bindgen_test_layout_opt_pk_t() {
    assert_eq!(
        ::std::mem::size_of::<opt_pk_t>(),
        64usize,
        concat!("Size of: ", stringify!(opt_pk_t))
    );
    assert_eq!(
        ::std::mem::align_of::<opt_pk_t>(),
        8usize,
        concat!("Alignment of ", stringify!(opt_pk_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<opt_pk_t>())).C as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(opt_pk_t),
            "::",
            stringify!(C)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<opt_pk_t>())).F as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(opt_pk_t),
            "::",
            stringify!(F)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<opt_pk_t>())).satC as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(opt_pk_t),
            "::",
            stringify!(satC)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<opt_pk_t>())).satF as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(opt_pk_t),
            "::",
            stringify!(satF)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<opt_pk_t>())).intdim as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(opt_pk_t),
            "::",
            stringify!(intdim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<opt_pk_t>())).realdim as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(opt_pk_t),
            "::",
            stringify!(realdim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<opt_pk_t>())).nbeq as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(opt_pk_t),
            "::",
            stringify!(nbeq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<opt_pk_t>())).nbline as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(opt_pk_t),
            "::",
            stringify!(nbline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<opt_pk_t>())).is_minimized as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(opt_pk_t),
            "::",
            stringify!(is_minimized)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<opt_pk_t>())).status as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(opt_pk_t),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct opt_pk_internal_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct opt_pk_array_t {
    pub poly: *mut *mut opt_pk_t,
    pub acl: *mut array_comp_list_t,
    pub maxcols: ::std::os::raw::c_ushort,
    pub is_bottom: bool_,
}
#[test]
fn bindgen_test_layout_opt_pk_array_t() {
    assert_eq!(
        ::std::mem::size_of::<opt_pk_array_t>(),
        24usize,
        concat!("Size of: ", stringify!(opt_pk_array_t))
    );
    assert_eq!(
        ::std::mem::align_of::<opt_pk_array_t>(),
        8usize,
        concat!("Alignment of ", stringify!(opt_pk_array_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<opt_pk_array_t>())).poly as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(opt_pk_array_t),
            "::",
            stringify!(poly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<opt_pk_array_t>())).acl as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(opt_pk_array_t),
            "::",
            stringify!(acl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<opt_pk_array_t>())).maxcols as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(opt_pk_array_t),
            "::",
            stringify!(maxcols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<opt_pk_array_t>())).is_bottom as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(opt_pk_array_t),
            "::",
            stringify!(is_bottom)
        )
    );
}
extern "C" {
    pub fn opt_pk_manager_alloc(strict: bool_) -> *mut elina_manager_t;
}
extern "C" {
    pub fn opt_pk_manager_get_internal(man: *mut elina_manager_t) -> *mut opt_pk_internal_t;
}
extern "C" {
    pub fn opt_pk_set_approximate_max_coeff_size(opk: *mut opt_pk_internal_t, size: size_t);
}
extern "C" {
    pub fn opt_pk_internal_alloc(strict: bool_) -> *mut opt_pk_internal_t;
}
extern "C" {
    pub fn opt_pk_internal_free(pk: *mut opt_pk_internal_t);
}
extern "C" {
    pub fn opt_pk_copy(man: *mut elina_manager_t, o: *mut opt_pk_array_t) -> *mut opt_pk_array_t;
}
extern "C" {
    pub fn opt_pk_free(man: *mut elina_manager_t, o: *mut opt_pk_array_t);
}
extern "C" {
    pub fn opt_pk_size(man: *mut elina_manager_t, o: *mut opt_pk_array_t) -> size_t;
}
extern "C" {
    pub fn opt_pk_minimize(man: *mut elina_manager_t, o: *mut opt_pk_array_t);
}
extern "C" {
    pub fn opt_pk_array_canonicalize(man: *mut elina_manager_t, o: *mut opt_pk_array_t);
}
extern "C" {
    pub fn opt_pk_array_fprint(
        stream: *mut FILE,
        man: *mut elina_manager_t,
        o: *mut opt_pk_array_t,
        name_of_dim: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn opt_pk_array_serialize_raw(
        man: *mut elina_manager_t,
        a: *mut opt_pk_array_t,
    ) -> elina_membuf_t;
}
extern "C" {
    pub fn opt_pk_array_deserialize_raw(
        man: *mut elina_manager_t,
        p: *mut ::std::os::raw::c_void,
        size: *mut size_t,
    ) -> *mut opt_pk_array_t;
}
extern "C" {
    pub fn opt_pk_bottom(
        man: *mut elina_manager_t,
        intdim: size_t,
        realdim: size_t,
    ) -> *mut opt_pk_array_t;
}
extern "C" {
    pub fn opt_pk_top(
        man: *mut elina_manager_t,
        intdim: size_t,
        realdim: size_t,
    ) -> *mut opt_pk_array_t;
}
extern "C" {
    pub fn opt_pk_of_box(
        man: *mut elina_manager_t,
        intdim: size_t,
        realdim: size_t,
        tinterval: *mut *mut elina_interval_t,
    ) -> *mut opt_pk_array_t;
}
extern "C" {
    pub fn opt_pk_dimension(man: *mut elina_manager_t, o: *mut opt_pk_array_t)
        -> elina_dimension_t;
}
extern "C" {
    pub fn opt_pk_is_bottom(man: *mut elina_manager_t, o: *mut opt_pk_array_t) -> bool_;
}
extern "C" {
    pub fn opt_pk_is_top(man: *mut elina_manager_t, o: *mut opt_pk_array_t) -> bool_;
}
extern "C" {
    pub fn opt_pk_is_leq(
        man: *mut elina_manager_t,
        o1: *mut opt_pk_array_t,
        o2: *mut opt_pk_array_t,
    ) -> bool_;
}
extern "C" {
    pub fn opt_pk_is_eq(
        man: *mut elina_manager_t,
        o1: *mut opt_pk_array_t,
        o2: *mut opt_pk_array_t,
    ) -> bool_;
}
extern "C" {
    pub fn opt_pk_sat_lincons(
        man: *mut elina_manager_t,
        oa: *mut opt_pk_array_t,
        lincons: *mut elina_lincons0_t,
    ) -> bool_;
}
extern "C" {
    pub fn opt_pk_sat_tcons(
        man: *mut elina_manager_t,
        oa: *mut opt_pk_array_t,
        cons: *mut elina_tcons0_t,
    ) -> bool_;
}
extern "C" {
    pub fn opt_pk_is_dimension_unconstrained(
        man: *mut elina_manager_t,
        oa: *mut opt_pk_array_t,
        dim: elina_dim_t,
    ) -> bool_;
}
extern "C" {
    pub fn opt_pk_bound_linexpr(
        man: *mut elina_manager_t,
        o: *mut opt_pk_array_t,
        expr: *mut elina_linexpr0_t,
    ) -> *mut elina_interval_t;
}
extern "C" {
    pub fn opt_pk_bound_dimension(
        man: *mut elina_manager_t,
        o: *mut opt_pk_array_t,
        dim: elina_dim_t,
    ) -> *mut elina_interval_t;
}
extern "C" {
    pub fn opt_pk_to_lincons_array(
        man: *mut elina_manager_t,
        o: *mut opt_pk_array_t,
    ) -> elina_lincons0_array_t;
}
extern "C" {
    pub fn opt_pk_to_box(
        man: *mut elina_manager_t,
        o: *mut opt_pk_array_t,
    ) -> *mut *mut elina_interval_t;
}
extern "C" {
    pub fn opt_pk_meet(
        man: *mut elina_manager_t,
        destructive: bool_,
        o1: *mut opt_pk_array_t,
        o2: *mut opt_pk_array_t,
    ) -> *mut opt_pk_array_t;
}
extern "C" {
    pub fn opt_pk_join(
        man: *mut elina_manager_t,
        destructive: bool_,
        oa: *mut opt_pk_array_t,
        ob: *mut opt_pk_array_t,
    ) -> *mut opt_pk_array_t;
}
extern "C" {
    pub fn opt_pk_meet_lincons_array(
        man: *mut elina_manager_t,
        destructive: bool_,
        o: *mut opt_pk_array_t,
        array: *mut elina_lincons0_array_t,
    ) -> *mut opt_pk_array_t;
}
extern "C" {
    pub fn opt_pk_meet_tcons_array(
        man: *mut elina_manager_t,
        destructive: bool_,
        oa: *mut opt_pk_array_t,
        array: *mut elina_tcons0_array_t,
    ) -> *mut opt_pk_array_t;
}
extern "C" {
    pub fn opt_pk_assign_linexpr_array(
        man: *mut elina_manager_t,
        destructive: bool_,
        oa: *mut opt_pk_array_t,
        tdim: *mut elina_dim_t,
        texpr: *mut *mut elina_linexpr0_t,
        size: size_t,
        dest: *mut opt_pk_array_t,
    ) -> *mut opt_pk_array_t;
}
extern "C" {
    pub fn opt_pk_substitute_linexpr_array(
        man: *mut elina_manager_t,
        destructive: bool_,
        oa: *mut opt_pk_array_t,
        tdim: *mut elina_dim_t,
        texpr: *mut *mut elina_linexpr0_t,
        size: size_t,
        dest: *mut opt_pk_array_t,
    ) -> *mut opt_pk_array_t;
}
extern "C" {
    pub fn opt_pk_assign_texpr_array(
        man: *mut elina_manager_t,
        destructive: bool_,
        oa: *mut opt_pk_array_t,
        tdim: *mut elina_dim_t,
        texpr: *mut *mut elina_texpr0_t,
        size: size_t,
        dest: *mut opt_pk_array_t,
    ) -> *mut opt_pk_array_t;
}
extern "C" {
    pub fn opt_pk_forget_array(
        man: *mut elina_manager_t,
        destructive: bool_,
        o: *mut opt_pk_array_t,
        tdim: *mut elina_dim_t,
        size: size_t,
        project: bool_,
    ) -> *mut opt_pk_array_t;
}
extern "C" {
    pub fn opt_pk_add_dimensions(
        man: *mut elina_manager_t,
        destructive: bool_,
        o: *mut opt_pk_array_t,
        dimchange: *mut elina_dimchange_t,
        project: bool_,
    ) -> *mut opt_pk_array_t;
}
extern "C" {
    pub fn opt_pk_remove_dimensions(
        man: *mut elina_manager_t,
        destructive: bool_,
        o: *mut opt_pk_array_t,
        dimchange: *mut elina_dimchange_t,
    ) -> *mut opt_pk_array_t;
}
extern "C" {
    pub fn opt_pk_permute_dimensions(
        man: *mut elina_manager_t,
        destructive: bool_,
        o: *mut opt_pk_array_t,
        permutation: *mut elina_dimperm_t,
    ) -> *mut opt_pk_array_t;
}
extern "C" {
    pub fn remove_block_and_factor(op: *mut opt_pk_array_t, cl: *mut comp_list_t);
}
extern "C" {
    pub fn opt_pk_expand(
        man: *mut elina_manager_t,
        destructive: bool_,
        o: *mut opt_pk_array_t,
        dim: elina_dim_t,
        n: size_t,
    ) -> *mut opt_pk_array_t;
}
extern "C" {
    pub fn opt_pk_fold(
        man: *mut elina_manager_t,
        destructive: bool_,
        o: *mut opt_pk_array_t,
        tdim: *mut elina_dim_t,
        size: size_t,
    ) -> *mut opt_pk_array_t;
}
extern "C" {
    pub fn opt_pk_widening(
        man: *mut elina_manager_t,
        o1: *mut opt_pk_array_t,
        o2: *mut opt_pk_array_t,
    ) -> *mut opt_pk_array_t;
}
extern "C" {
    pub fn foreach_linterm_of_linexpr0(
        e: *mut elina_linexpr0_t,
        f: ::std::option::Option<
            unsafe extern "C" fn(i: size_t, dim: elina_dim_t, coeff: *mut elina_coeff_t),
        >,
    );
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct opt_matrix_t {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct opt_satmat_t {
    pub _address: u8,
}
